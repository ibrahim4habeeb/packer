
value=\$(echo "\$value" | sed 's/ /\\ /g' | sed 's/(/\\(/g' | sed 's/)/\\)/g')
########################################################
// Define the disk name and resource group
def diskName = "your-disk-name"         // Replace with your disk name
def sourceRG = "your-resource-group"   // Replace with your resource group

// Fetch the tags JSON using az CLI
def tagsJson = "az disk show --name ${diskName} --resource-group ${sourceRG} --query tags -o json".execute().text.trim()

// Parse the JSON into a Map
def tagsMap = new groovy.json.JsonSlurper().parseText(tagsJson)

// Initialize an empty list for formatted tags
def formattedTags = []

// Loop through the map and format each key-value pair as "key=value"
tagsMap.each { key, value ->
    formattedTags << "${key}=${value}"
}

// Join the formatted tags with a space and output the result
def formattedTagsString = formattedTags.join(" ")
println formattedTagsString
pipeline {
    agent any

    stages {
        stage('Process Tags') {
            steps {
                script {
                    sh """
                    #!/bin/bash

                    # Fetch the tags JSON from Azure
                    TAGS=\$(az disk show --name ${diskName} --resource-group ${sourceRG} --query "tags" -o json)

                    # Check if TAGS is empty
                    if [ -z "\$TAGS" ]; then
                        echo "No tags found."
                        exit 1
                    fi

                    # Parse and format tags using a loop
                    FORMATTED_TAGS=""
                    for key in \$(echo "\$TAGS" | jq -r 'keys[]'); do
                        value=\$(echo "\$TAGS" | jq -r ".\$key")
                        FORMATTED_TAGS+="\${key}=\${value} "
                    done

                    # Output the formatted tags
                    echo "Formatted Tags: \$FORMATTED_TAGS"
                    """
                }
            }
        }
    }
}

===========
pipeline {
    agent any

    stages {
        stage('Process Tags') {
            steps {
                script {
                    sh """
                    #!/bin/bash

                    # Fetch the tags JSON from Azure
                    TAGS=\$(az disk show --name ${diskName} --resource-group ${sourceRG} --query "tags" -o json)

                    # Check if TAGS is empty
                    if [ -z "\$TAGS" ]; then
                        echo "No tags found."
                        exit 1
                    fi

                    # Parse and format tags with double quotes
                    FORMATTED_TAGS=""
                    while read -r key; do
                        value=\$(echo "\$TAGS" | jq -r ".\\\"\$key\\\"")
                        FORMATTED_TAGS+="\"\$key\"=\"\$value\" "
                        echo "key=\"\$key\""
                        echo "value=\"\$value\""
                    done < <(echo "\$TAGS" | jq -r 'keys[]')

                    # Output the formatted tags
                    echo "Formatted Tags: \$FORMATTED_TAGS"
                    """
                }
            }
        }
    }
}
using for loop
pipeline {
    agent any

    stages {
        stage('Process Tags') {
            steps {
                script {
                    sh """
                    #!/bin/bash

                    # Fetch the tags JSON from Azure
                    TAGS=\$(az disk show --name ${diskName} --resource-group ${sourceRG} --query "tags" -o json)

                    # Check if TAGS is empty
                    if [ -z "\$TAGS" ]; then
                        echo "No tags found."
                        exit 1
                    fi

                    # Parse and format tags using a for loop
                    FORMATTED_TAGS=""
                    for key in \$(echo "\$TAGS" | jq -r 'keys[]'); do
                        value=\$(echo "\$TAGS" | jq -r ".\$key")
                        echo "key=\$key"
                        echo "value=\$value"
                        FORMATTED_TAGS+="\$key=\$value "
                    done

                    # Output the formatted tags
                    echo "Formatted Tags: \$FORMATTED_TAGS"
                    """
                }
            }
        }
    }
}
pipeline {
    agent any

    stages {
        stage('Process Tags') {
            steps {
                script {
                    sh """
                    #!/bin/bash

                    # Fetch the tags JSON from Azure
                    TAGS=\$(az disk show --name ${diskName} --resource-group ${sourceRG} --query "tags" -o json)

                    # Check if TAGS is empty
                    if [ -z "\$TAGS" ]; then
                        echo "No tags found."
                        exit 1
                    fi

                    # Parse and format tags using a for loop
                    FORMATTED_TAGS=""
                    for key in \$(echo "\$TAGS" | jq -r 'keys[]'); do
                        value=\$(echo "\$TAGS" | jq -r ".\$key")
                        echo "key=\$key"
                        echo "value=\$value"
                        FORMATTED_TAGS+='"'\$key=\$value'" '
                    done

                    # Output the formatted tags
                    echo "Formatted Tags: \$FORMATTED_TAGS"
                    """
                }
            }
        }
    }
}
123
pipeline {
    agent any

    stages {
        stage('Process Tags') {
            steps {
                script {
                    sh """
                    #!/bin/bash

                    # Input JSON wrapped in single quotes
                    TAGS='{
                      "abc2": "abc1",
                      "abc3": "abc4",
                      "abc5": "abc5 (Dev-Ops)"
                    }'

                    # Remove single quotes around JSON before parsing
                    PARSED_TAGS=\$(echo "\$TAGS" | sed "s/^'//;s/'\$//")

                    # Parse and format tags using a for loop
                    FORMATTED_TAGS=""
                    for key in \$(echo "\$PARSED_TAGS" | jq -r 'keys[]'); do
                        value=\$(echo "\$PARSED_TAGS" | jq -r ".\$key")
                        echo "key=\$key"
                        echo "value=\$value"
                        FORMATTED_TAGS+="'\$key=\$value' "
                    done

                    # Output the formatted tags
                    echo "Formatted Tags: \$FORMATTED_TAGS"
                    """
                }
            }
        }
    }
}
