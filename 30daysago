pipeline {
    agent any
    stages {
        stage('Generate Disk and Snapshot Info') {
            steps {
                script {
                    sh '''#!/bin/bash
# Get current date in ISO format
current_date=$(date -I)

# Function to format date to DD-MM-YYYY
format_date() {
    jq -r '. | .name + " " + (.LastModified | sub("T.*$"; "") | split("-") | .[2] + "-" + .[1] + "-" + .[0])'
}

# Fetch and process disk information created more than 30 days ago
az disk list -g rgname \
    --query "[?@.timeCreated <= '${current_date}T00:00:00Z' && @.timeCreated < \`$(date -I -d '30 days ago')\`].{name:name, LastModified: (not_null(LastOwnershipUpdateTime, timeCreated))}" -o json \
    | jq -c '.[]' \
    | while read -r entry; do
        echo "$entry" | format_date >> ddnames.txt
    done

# Fetch and process snapshot information created more than 30 days ago
az snapshot list -g rgname \
    --query "[?@.timeCreated <= '${current_date}T00:00:00Z' && @.timeCreated < \`$(date -I -d '30 days ago')\`].{name:name, LastModified: (not_null(LastOwnershipUpdateTime, timeCreated))}" -o json \
    | jq -c '.[]' \
    | while read -r entry; do
        echo "$entry" | format_date >> ssnames.txt
    done
                    '''
                }
            }
        }
    }
}


====
pipeline {
    agent any
    stages {
        stage('Generate Disk and Snapshot Info') {
            steps {
                script {
                    sh '''#!/bin/bash
# Get the date 30 days ago in ISO format
thirty_days_ago=$(date -I -d '30 days ago')

# Function to format date to DD-MM-YYYY
format_date() {
    jq -r '. | .name + " " + (.timeCreated | sub("T.*$"; "") | split("-") | .[2] + "-" + .[1] + "-" + .[0])'
}

# Fetch and process disks created more than 30 days ago
az disk list -g rgname \
    --query "[?timeCreated <= \`$thirty_days_ago\`].{name:name, timeCreated:timeCreated}" -o json \
    | jq -c '.[]' \
    | while read -r entry; do
        echo "$entry" | format_date >> ddnames.txt
    done

# Fetch and process snapshots created more than 30 days ago
az snapshot list -g rgname \
    --query "[?timeCreated <= \`$thirty_days_ago\`].{name:name, timeCreated:timeCreated}" -o json \
    | jq -c '.[]' \
    | while read -r entry; do
        echo "$entry" | format_date >> ssnames.txt
    done
                    '''
                }
            }
        }
    }
}

days as variable parameter
pipeline {
    agent any
    parameters {
        string(name: 'DAYS_AGO', defaultValue: '30', description: 'Enter the number of days ago (e.g., 7, 30, 60)')
    }
    stages {
        stage('Generate Disk and Snapshot Info') {
            steps {
                script {
                    sh '''
                    #!/bin/bash
                    # Get the number of days from Jenkins parameter
                    DAYS_AGO=${DAYS_AGO}

                    # Get the date X days ago in ISO format
                    target_date=$(date -I -d "$DAYS_AGO days ago")

                    # Function to format date to DD-MM-YYYY
                    format_date() {
                        jq -r '. | .name + " " + (.timeCreated | sub("T.*$"; "") | split("-") | .[2] + "-" + .[1] + "-" + .[0])'
                    }

                    echo "Fetching disks and snapshots older than $DAYS_AGO days (before $target_date)..."

                    # Fetch and process disks created more than X days ago
                    az disk list -g rgname \
                        --query "[?timeCreated <= '$target_date'].{name:name, timeCreated:timeCreated}" -o json \
                        | jq -c '.[]' \
                        | while read -r entry; do
                            echo "$entry" | format_date >> ddnames.txt
                        done

                    # Fetch and process snapshots created more than X days ago
                    az snapshot list -g rgname \
                        --query "[?timeCreated <= '$target_date'].{name:name, timeCreated:timeCreated}" -o json \
                        | jq -c '.[]' \
                        | while read -r entry; do
                            echo "$entry" | format_date >> ssnames.txt
                        done
                    '''
                }
            }
        }
    }
}

list and delete automatically 
pipeline {
    agent any
    parameters {
        string(name: 'DAYS_AGO', defaultValue: '30', description: 'Enter the number of days ago (e.g., 7, 30, 60)')
        string(name: 'RESOURCE_GROUP', defaultValue: 'rgname', description: 'Azure Resource Group containing snapshots')
    }
    environment {
        SNAPSHOT_FILE = 'snapshots_to_delete.txt'
    }
    stages {
        stage('List Old Snapshots') {
            steps {
                script {
                    sh '''
                    #!/bin/bash
                    set -e
                    
                    # Get the number of days from Jenkins parameter
                    DAYS_AGO=${DAYS_AGO}

                    # Get the date X days ago in ISO format
                    TARGET_DATE=$(date -I -d "$DAYS_AGO days ago")

                    echo "Fetching snapshots older than $DAYS_AGO days (before $TARGET_DATE)..."

                    # Fetch and process snapshots created more than X days ago
                    az snapshot list -g ${RESOURCE_GROUP} \
                        --query "[?timeCreated <= '$TARGET_DATE'].name" -o tsv > ${SNAPSHOT_FILE}

                    # Display the snapshots found
                    if [ -s "${SNAPSHOT_FILE}" ]; then
                        echo "Snapshots to delete:"
                        cat ${SNAPSHOT_FILE}
                    else
                        echo "No snapshots found older than ${DAYS_AGO} days."
                    fi
                    '''
                }
            }
        }

        stage('Delete Snapshots') {
            when {
                expression { fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0 }
            }
            steps {
                script {
                    def snapshotNames = readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }
                    snapshotNames.each { snapshotName ->
                        sh """
                        #!/bin/bash
                        echo "Deleting snapshot: ${snapshotName} from resource group: ${RESOURCE_GROUP}"
                        az snapshot delete --name ${snapshotName} --resource-group ${RESOURCE_GROUP} --yes
                        """
                    }
                }
            }
        }
    }
}
