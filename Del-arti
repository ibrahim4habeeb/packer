=======
for Multiple dir
pipeline {
    agent any
    environment {
        AZCOPY_SRC_BASE = "https://ur-sa-url/arti/test101/"
        AZCOPY_DEST_BASE = "https://ur-sa-url/backups/"
        DIR_NAMES = "dir-name1,dir-name2,dir-name3" // Comma-separated list of directories
    }
    stages {
        stage('Process Directories') {
            steps {
                script {
                    def dirList = env.DIR_NAMES.split(',')
                    
                    dirList.each { dirName ->
                        echo "Processing directory: ${dirName}"
                        
                        def srcDir = "${AZCOPY_SRC_BASE}${dirName}"
                        def destDir = "${AZCOPY_DEST_BASE}${dirName}"
                        
                        echo "Copying from ${srcDir} to ${destDir}"
                        def copyCommand = "azcopy cp ${srcDir} ${destDir} --recursive=true"
                        def copyResult = sh(script: copyCommand, returnStatus: true)
                        
                        if (copyResult != 0) {
                            error "Copy operation failed for ${dirName}. Aborting pipeline."
                        }
                        
                        echo "Verifying the copy operation for ${destDir}"
                        def verifyCommand = "azcopy list ${destDir} --recursive=true"
                        def verifyResult = sh(script: verifyCommand, returnStatus: true)
                        
                        if (verifyResult != 0) {
                            error "Verification failed for ${dirName}. Backup directory not found. Aborting pipeline."
                        }
                        
                        echo "Deleting directory ${srcDir}"
                        def deleteCommand = "azcopy remove ${srcDir} --recursive=true"
                        def deleteResult = sh(script: deleteCommand, returnStatus: true)
                        
                        if (deleteResult != 0) {
                            error "Delete operation failed for ${dirName}."
                        } else {
                            echo "Directory ${dirName} processed successfully."
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution completed."
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}
====≈======
pipeline {
    agent any
    environment {
        AZCOPY_SRC = "https://ur-sa-url/arti/test101/dir-name"
        AZCOPY_DEST = "https://ur-sa-url/backups"
    }
    stages {
        stage('Copy to Backup Location') {
            steps {
                script {
                    echo "Copying from ${AZCOPY_SRC} to ${AZCOPY_DEST}"
                    def copyCommand = "azcopy cp ${AZCOPY_SRC} ${AZCOPY_DEST} --recursive=true"
                    def copyResult = sh(script: copyCommand, returnStatus: true)

                    if (copyResult != 0) {
                        error "Copy operation failed. Aborting pipeline."
                    }
                }
            }
        }
        stage('Verify Copy Operation') {
            steps {
                script {
                    echo "Verifying the copy operation for ${AZCOPY_SRC}"
                    def checkCommand = "azcopy list ${AZCOPY_DEST}/dir-name --recursive=true"
                    def verifyResult = sh(script: checkCommand, returnStatus: true)

                    if (verifyResult != 0) {
                        error "Verification failed. Backup directory not found. Aborting pipeline."
                    }
                }
            }
        }
        stage('Delete Directory') {
            steps {
                script {
                    echo "Deleting directory ${AZCOPY_SRC}"
                    def deleteCommand = "azcopy remove ${AZCOPY_SRC} --recursive=true"
                    def deleteResult = sh(script: deleteCommand, returnStatus: true)

                    if (deleteResult != 0) {
                        error "Delete operation failed."
                    } else {
                        echo "Directory ${AZCOPY_SRC} deleted successfully."
                    }
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution completed."
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}
+++++×××××÷÷÷÷=======#########
#############
pipeline {
    agent any
    parameters {
        string(name: 'ENTERDIR', defaultValue: '', description: 'Comma-separated list of directories (e.g., dir1,dir2,dir3)')
        string(name: 'ENTERENV', defaultValue: '', description: 'Enter the environment name')
        string(name: 'ENTERUSAGE', defaultValue: '', description: 'Enter the usage description')
        string(name: 'ENTERJENKINSNAME', defaultValue: '', description: 'Enter the Jenkins job name')
    }
    environment {
        AZCOPY_DEST = "https://ur-sa-url/backups/${params.ENTERUSAGE}/${params.ENTERJENKINSNAME}"
        DIRFILE = 'dir_list.txt'
    }
    stages {
        stage('Prepare Directory File') {
            steps {
                script {
                    // Write the comma-separated values into a file
                    sh """
                        echo "${params.ENTERDIR}" | tr ',' '\\n' > ${DIRFILE}
                    """
                    echo "Directory list written to ${DIRFILE}."
                }
            }
        }
        stage('Validate and Copy Directories') {
            steps {
                script {
                    // Read directory names from the file and copy them
                    sh """
                        while read -r dir; do
                            echo "Processing directory: \$dir"
                            SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"
                            DEST_URL="${AZCOPY_DEST}/\$dir"

                            # Copy the directory
                            echo "Copying from \$SOURCE_URL to \$DEST_URL"
                            azcopy cp "\$SOURCE_URL" "\$DEST_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Copy operation failed for directory: \$dir"
                                exit 1
                            fi

                            # Verify the copy
                            echo "Verifying copy for \$dir"
                            azcopy list "\$DEST_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Verification failed for directory: \$dir"
                                exit 1
                            fi
                        done < ${DIRFILE}
                    """
                }
            }
        }
        stage('Delete Source Directories') {
            steps {
                script {
                    // Read directory names from the file and delete them
                    sh """
                        while read -r dir; do
                            echo "Deleting source directory: \$dir"
                            SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"

                            # Delete the source directory
                            azcopy remove "\$SOURCE_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Delete operation failed for directory: \$dir"
                                exit 1
                            fi
                        done < ${DIRFILE}
                    """
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution completed."
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}
10-12-2024 22:34PM
pipeline {
    agent any
    parameters {
        string(name: 'ENTERDIR', defaultValue: '', description: 'Comma-separated list of directories (e.g., dir1,dir2,dir3)')
        string(name: 'ENTERENV', defaultValue: '', description: 'Enter the environment name')
        string(name: 'ENTERUSAGE', defaultValue: '', description: 'Enter the usage description')
        string(name: 'ENTERJENKINSNAME', defaultValue: '', description: 'Enter the Jenkins job name')
    }
    environment {
        DIRFILE = 'dir_list.txt'
    }
    stages {
        stage('Validate Input and Prepare Directory File') {
            steps {
                script {
                    // Validate ENTERDIR
                    if (!params.ENTERDIR?.trim()) {
                        error "Parameter ENTERDIR is empty. Please provide a comma-separated list of directories."
                    }

                    // Write the comma-separated values into a file
                    sh """
                        echo "${params.ENTERDIR}" | tr ',' '\\n' > ${DIRFILE}
                        echo "Directories to process:"
                        cat ${DIRFILE}
                    """
                }
            }
        }
        stage('Validate and Copy Directories to Timestamped Destination') {
            steps {
                script {
                    sh """
                        TIMESTAMP=\$(date +%Y%m%d%H%M%S)
                        while read -r dir; do
                            if [ -z "\$dir" ]; then
                                echo "Empty directory name found, skipping."
                                continue
                            fi

                            echo "Processing directory: \$dir"
                            SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"
                            DEST_URL="https://ur-sa-url/backups/${params.ENTERUSAGE}/${params.ENTERJENKINSNAME}/\$dir/\$TIMESTAMP"

                            # Copy the directory
                            echo "Copying from \$SOURCE_URL to \$DEST_URL"
                            azcopy cp "\$SOURCE_URL" "\$DEST_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Copy operation failed for directory: \$dir"
                                exit 1
                            fi

                            # Verify the copy
                            echo "Verifying copy for \$dir"
                            azcopy list "\$DEST_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Verification failed for directory: \$dir"
                                exit 1
                            fi
                        done < ${DIRFILE}
                    """
                }
            }
        }
        stage('Delete Source Directories') {
            steps {
                script {
                    sh """
                        while read -r dir; do
                            if [ -z "\$dir" ]; then
                                echo "Empty directory name found, skipping."
                                continue
                            fi

                            echo "Deleting source directory: \$dir"
                            SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"

                            # Delete the source directory
                            azcopy remove "\$SOURCE_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Delete operation failed for directory: \$dir"
                                exit 1
                            fi
                        done < ${DIRFILE}
                    """
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution completed."
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}
11-12-2024 8:47AM
pipeline {
    agent any
    parameters {
        string(name: 'ENTERDIR', defaultValue: '', description: 'Comma-separated list of directories (e.g., dir1,dir2)')
        string(name: 'ENTERENV', defaultValue: '', description: 'Enter the environment name')
        string(name: 'ENTERUSAGE', defaultValue: '', description: 'Enter the usage description')
        string(name: 'ENTERJENKINSNAME', defaultValue: '', description: 'Enter the Jenkins job name')
    }
    environment {
        TIMESTAMP = "${new Date().format('yyyyMMddHHmmss')}" // Generate timestamp
        DIRFILE = 'dir_list.txt'
    }
    stages {
        stage('Validate Input and Prepare Directory File') {
            steps {
                script {
                    // Validate ENTERDIR
                    if (!params.ENTERDIR?.trim()) {
                        error "Parameter ENTERDIR is empty. Please provide a comma-separated list of directories."
                    }

                    // Write the comma-separated values into a file
                    sh """
                        echo "${params.ENTERDIR}" | tr ',' '\\n' > ${DIRFILE}
                        echo "Directories to process:"
                        cat ${DIRFILE}
                    """
                }
            }
        }
        stage('Copy Directories to Timestamped Destination') {
            steps {
                script {
                    sh """
                        while read -r dir; do
                            if [ -z "\$dir" ]; then
                                echo "Empty directory name found, skipping."
                                continue
                            fi

                            echo "Processing directory: \$dir"
                            SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"
                            DEST_URL="https://ur-sa-url/backups/${params.ENTERUSAGE}/${params.ENTERJENKINSNAME}/${TIMESTAMP}/\$dir"

                            # Copy the directory
                            echo "Copying from \$SOURCE_URL to \$DEST_URL"
                            azcopy cp "\$SOURCE_URL" "\$DEST_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Copy operation failed for directory: \$dir"
                                continue # Continue to the next directory even if this fails
                            fi

                            # Verify the copy
                            echo "Verifying copy for \$dir"
                            azcopy list "\$DEST_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Verification failed for directory: \$dir"
                                continue # Continue to the next directory even if verification fails
                            fi
                        done < ${DIRFILE}
                    """
                }
            }
        }
        stage('Delete Source Directories') {
            steps {
                script {
                    sh """
                        while read -r dir; do
                            if [ -z "\$dir" ]; then
                                echo "Empty directory name found, skipping."
                                continue
                            fi

                            echo "Deleting source directory: \$dir"
                            SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"

                            # Delete the source directory
                            azcopy remove "\$SOURCE_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Delete operation failed for directory: \$dir"
                                continue # Continue to the next directory even if this fails
                            fi
                        done < ${DIRFILE}
                    """
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution completed."
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}
