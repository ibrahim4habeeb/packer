pipeline {
    agent any
    environment {
        DDFILE = 'dd.txt' // Path to the file containing data disk names
        SNAPSHOT_FILE = 'snapshots.txt' // Path to the file containing snapshot names
    }
    parameters {
        string(name: 'SOURCE_RG', defaultValue: 'source-resource-group', description: 'Source Resource Group Name')
        string(name: 'TARGET_RG', defaultValue: 'target-resource-group', description: 'Target Resource Group Name')
    }
    stages {
        stage('Validate Inputs') {
            steps {
                script {
                    def hasDataDisks = fileExists(env.DDFILE) && readFile(env.DDFILE).readLines().findAll { it?.trim() }.size() > 0
                    def hasSnapshots = fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0

                    if (!hasDataDisks && !hasSnapshots) {
                        error "Both Data Disk file (${env.DDFILE}) and Snapshot file (${env.SNAPSHOT_FILE}) are either missing or contain no valid entries!"
                    }

                    if (hasDataDisks) {
                        echo "Data Disk file (${env.DDFILE}) contains valid entries."
                    } else {
                        echo "No valid entries found in Data Disk file (${env.DDFILE}). Skipping data disk processing."
                    }

                    if (hasSnapshots) {
                        echo "Snapshot file (${env.SNAPSHOT_FILE}) contains valid entries."
                    } else {
                        echo "No valid entries found in Snapshot file (${env.SNAPSHOT_FILE}). Skipping snapshot processing."
                    }
                }
            }
        }

        stage('Move Resources') {
            parallel {
                stage('Move Azure Data Disks') {
                    when {
                        expression { fileExists(env.DDFILE) && readFile(env.DDFILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        script {
                            def diskNames = readFile(env.DDFILE).readLines().findAll { it?.trim() }

                            diskNames.each { diskName ->
                                sh """
                                #!/bin/bash
                                echo "Fetching ID for data disk: ${diskName}"
                                DISK_ID=\$(az disk show --name ${diskName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)
                                
                                if [ -n "\$DISK_ID" ]; then
                                    echo "Moving data disk: ${diskName} to resource group: ${params.TARGET_RG}"
                                    az resource move --ids \$DISK_ID --destination-group ${params.TARGET_RG}
                                else
                                    echo "Data disk ID not found for disk: ${diskName}. Please verify the name and source resource group."
                                fi
                                """
                            }
                        }
                    }
                }

                stage('Move Azure Snapshots') {
                    when {
                        expression { fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        script {
                            def snapshotNames = readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }

                            snapshotNames.each { snapshotName ->
                                sh """
                                #!/bin/bash
                                echo "Fetching ID for snapshot: ${snapshotName}"
                                SNAPSHOT_ID=\$(az snapshot show --name ${snapshotName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)
                                
                                if [ -n "\$SNAPSHOT_ID" ]; then
                                    echo "Moving snapshot: ${snapshotName} to resource group: ${params.TARGET_RG}"
                                    az resource move --ids \$SNAPSHOT_ID --destination-group ${params.TARGET_RG}
                                else
                                    echo "Snapshot ID not found for snapshot: ${snapshotName}. Please verify the name and source resource group."
                                fi
                                """
                            }
                        }
                    }
                }
            }
        }
    }
}


=======
for Multiple dir
pipeline {
    agent any
    environment {
        AZCOPY_SRC_BASE = "https://ur-sa-url/arti/test101/"
        AZCOPY_DEST_BASE = "https://ur-sa-url/backups/"
        DIR_NAMES = "dir-name1,dir-name2,dir-name3" // Comma-separated list of directories
    }
    stages {
        stage('Process Directories') {
            steps {
                script {
                    def dirList = env.DIR_NAMES.split(',')
                    
                    dirList.each { dirName ->
                        echo "Processing directory: ${dirName}"
                        
                        def srcDir = "${AZCOPY_SRC_BASE}${dirName}"
                        def destDir = "${AZCOPY_DEST_BASE}${dirName}"
                        
                        echo "Copying from ${srcDir} to ${destDir}"
                        def copyCommand = "azcopy cp ${srcDir} ${destDir} --recursive=true"
                        def copyResult = sh(script: copyCommand, returnStatus: true)
                        
                        if (copyResult != 0) {
                            error "Copy operation failed for ${dirName}. Aborting pipeline."
                        }
                        
                        echo "Verifying the copy operation for ${destDir}"
                        def verifyCommand = "azcopy list ${destDir} --recursive=true"
                        def verifyResult = sh(script: verifyCommand, returnStatus: true)
                        
                        if (verifyResult != 0) {
                            error "Verification failed for ${dirName}. Backup directory not found. Aborting pipeline."
                        }
                        
                        echo "Deleting directory ${srcDir}"
                        def deleteCommand = "azcopy remove ${srcDir} --recursive=true"
                        def deleteResult = sh(script: deleteCommand, returnStatus: true)
                        
                        if (deleteResult != 0) {
                            error "Delete operation failed for ${dirName}."
                        } else {
                            echo "Directory ${dirName} processed successfully."
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution completed."
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}
====≈======
pipeline {
    agent any
    environment {
        AZCOPY_SRC = "https://ur-sa-url/arti/test101/dir-name"
        AZCOPY_DEST = "https://ur-sa-url/backups"
    }
    stages {
        stage('Copy to Backup Location') {
            steps {
                script {
                    echo "Copying from ${AZCOPY_SRC} to ${AZCOPY_DEST}"
                    def copyCommand = "azcopy cp ${AZCOPY_SRC} ${AZCOPY_DEST} --recursive=true"
                    def copyResult = sh(script: copyCommand, returnStatus: true)

                    if (copyResult != 0) {
                        error "Copy operation failed. Aborting pipeline."
                    }
                }
            }
        }
        stage('Verify Copy Operation') {
            steps {
                script {
                    echo "Verifying the copy operation for ${AZCOPY_SRC}"
                    def checkCommand = "azcopy list ${AZCOPY_DEST}/dir-name --recursive=true"
                    def verifyResult = sh(script: checkCommand, returnStatus: true)

                    if (verifyResult != 0) {
                        error "Verification failed. Backup directory not found. Aborting pipeline."
                    }
                }
            }
        }
        stage('Delete Directory') {
            steps {
                script {
                    echo "Deleting directory ${AZCOPY_SRC}"
                    def deleteCommand = "azcopy remove ${AZCOPY_SRC} --recursive=true"
                    def deleteResult = sh(script: deleteCommand, returnStatus: true)

                    if (deleteResult != 0) {
                        error "Delete operation failed."
                    } else {
                        echo "Directory ${AZCOPY_SRC} deleted successfully."
                    }
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution completed."
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}
+++++×××××÷÷÷÷=======#########
#############
pipeline {
    agent any
    parameters {
        string(name: 'ENTERDIR', defaultValue: '', description: 'Comma-separated list of directories (e.g., dir1,dir2,dir3)')
        string(name: 'ENTERENV', defaultValue: '', description: 'Enter the environment name')
        string(name: 'ENTERUSAGE', defaultValue: '', description: 'Enter the usage description')
        string(name: 'ENTERJENKINSNAME', defaultValue: '', description: 'Enter the Jenkins job name')
    }
    environment {
        AZCOPY_DEST = "https://ur-sa-url/backups/${params.ENTERUSAGE}/${params.ENTERJENKINSNAME}"
        DIRFILE = 'dir_list.txt'
    }
    stages {
        stage('Prepare Directory File') {
            steps {
                script {
                    // Write the comma-separated values into a file
                    sh """
                        echo "${params.ENTERDIR}" | tr ',' '\\n' > ${DIRFILE}
                    """
                    echo "Directory list written to ${DIRFILE}."
                }
            }
        }
        stage('Validate and Copy Directories') {
            steps {
                script {
                    // Read directory names from the file and copy them
                    sh """
                        while read -r dir; do
                            echo "Processing directory: \$dir"
                            SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"
                            DEST_URL="${AZCOPY_DEST}/\$dir"

                            # Copy the directory
                            echo "Copying from \$SOURCE_URL to \$DEST_URL"
                            azcopy cp "\$SOURCE_URL" "\$DEST_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Copy operation failed for directory: \$dir"
                                exit 1
                            fi

                            # Verify the copy
                            echo "Verifying copy for \$dir"
                            azcopy list "\$DEST_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Verification failed for directory: \$dir"
                                exit 1
                            fi
                        done < ${DIRFILE}
                    """
                }
            }
        }
        stage('Delete Source Directories') {
            steps {
                script {
                    // Read directory names from the file and delete them
                    sh """
                        while read -r dir; do
                            echo "Deleting source directory: \$dir"
                            SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"

                            # Delete the source directory
                            azcopy remove "\$SOURCE_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Delete operation failed for directory: \$dir"
                                exit 1
                            fi
                        done < ${DIRFILE}
                    """
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution completed."
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}
10-12-2024 22:34PM
pipeline {
    agent any
    parameters {
        string(name: 'ENTERDIR', defaultValue: '', description: 'Comma-separated list of directories (e.g., dir1,dir2,dir3)')
        string(name: 'ENTERENV', defaultValue: '', description: 'Enter the environment name')
        string(name: 'ENTERUSAGE', defaultValue: '', description: 'Enter the usage description')
        string(name: 'ENTERJENKINSNAME', defaultValue: '', description: 'Enter the Jenkins job name')
    }
    environment {
        DIRFILE = 'dir_list.txt'
    }
    stages {
        stage('Validate Input and Prepare Directory File') {
            steps {
                script {
                    // Validate ENTERDIR
                    if (!params.ENTERDIR?.trim()) {
                        error "Parameter ENTERDIR is empty. Please provide a comma-separated list of directories."
                    }

                    // Write the comma-separated values into a file
                    sh """
                        echo "${params.ENTERDIR}" | tr ',' '\\n' > ${DIRFILE}
                        echo "Directories to process:"
                        cat ${DIRFILE}
                    """
                }
            }
        }
        stage('Validate and Copy Directories to Timestamped Destination') {
            steps {
                script {
                    sh """
                        TIMESTAMP=\$(date +%Y%m%d%H%M%S)
                        while read -r dir; do
                            if [ -z "\$dir" ]; then
                                echo "Empty directory name found, skipping."
                                continue
                            fi

                            echo "Processing directory: \$dir"
                            SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"
                            DEST_URL="https://ur-sa-url/backups/${params.ENTERUSAGE}/${params.ENTERJENKINSNAME}/\$dir/\$TIMESTAMP"

                            # Copy the directory
                            echo "Copying from \$SOURCE_URL to \$DEST_URL"
                            azcopy cp "\$SOURCE_URL" "\$DEST_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Copy operation failed for directory: \$dir"
                                exit 1
                            fi

                            # Verify the copy
                            echo "Verifying copy for \$dir"
                            azcopy list "\$DEST_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Verification failed for directory: \$dir"
                                exit 1
                            fi
                        done < ${DIRFILE}
                    """
                }
            }
        }
        stage('Delete Source Directories') {
            steps {
                script {
                    sh """
                        while read -r dir; do
                            if [ -z "\$dir" ]; then
                                echo "Empty directory name found, skipping."
                                continue
                            fi

                            echo "Deleting source directory: \$dir"
                            SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"

                            # Delete the source directory
                            azcopy remove "\$SOURCE_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Delete operation failed for directory: \$dir"
                                exit 1
                            fi
                        done < ${DIRFILE}
                    """
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution completed."
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}
11-12-2024 8:47AM
pipeline {
    agent any
    parameters {
        string(name: 'ENTERDIR', defaultValue: '', description: 'Comma-separated list of directories (e.g., dir1,dir2)')
        string(name: 'ENTERENV', defaultValue: '', description: 'Enter the environment name')
        string(name: 'ENTERUSAGE', defaultValue: '', description: 'Enter the usage description')
        string(name: 'ENTERJENKINSNAME', defaultValue: '', description: 'Enter the Jenkins job name')
    }
    environment {
        TIMESTAMP = "${new Date().format('yyyyMMddHHmmss')}" // Generate timestamp
        DIRFILE = 'dir_list.txt'
    }
    stages {
        stage('Validate Input and Prepare Directory File') {
            steps {
                script {
                    // Validate ENTERDIR
                    if (!params.ENTERDIR?.trim()) {
                        error "Parameter ENTERDIR is empty. Please provide a comma-separated list of directories."
                    }

                    // Write the comma-separated values into a file
                    sh """
                        echo "${params.ENTERDIR}" | tr ',' '\\n' > ${DIRFILE}
                        echo "Directories to process:"
                        cat ${DIRFILE}
                    """
                }
            }
        }
        stage('Copy Directories to Timestamped Destination') {
            steps {
                script {
                    sh """
                        while read -r dir; do
                            if [ -z "\$dir" ]; then
                                echo "Empty directory name found, skipping."
                                continue
                            fi

                            echo "Processing directory: \$dir"
                            SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"
                            DEST_URL="https://ur-sa-url/backups/${params.ENTERUSAGE}/${params.ENTERJENKINSNAME}/${TIMESTAMP}/\$dir"

                            # Copy the directory
                            echo "Copying from \$SOURCE_URL to \$DEST_URL"
                            azcopy cp "\$SOURCE_URL" "\$DEST_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Copy operation failed for directory: \$dir"
                                continue # Continue to the next directory even if this fails
                            fi

                            # Verify the copy
                            echo "Verifying copy for \$dir"
                            azcopy list "\$DEST_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Verification failed for directory: \$dir"
                                continue # Continue to the next directory even if verification fails
                            fi
                        done < ${DIRFILE}
                    """
                }
            }
        }
        stage('Delete Source Directories') {
            steps {
                script {
                    sh """
                        while read -r dir; do
                            if [ -z "\$dir" ]; then
                                echo "Empty directory name found, skipping."
                                continue
                            fi

                            echo "Deleting source directory: \$dir"
                            SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"

                            # Delete the source directory
                            azcopy remove "\$SOURCE_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Delete operation failed for directory: \$dir"
                                continue # Continue to the next directory even if this fails
                            fi
                        done < ${DIRFILE}
                    """
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution completed."
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}

9:12AM

pipeline {
    agent any
    parameters {
        string(name: 'ENTERDIR', defaultValue: '', description: 'Comma-separated list of directories (e.g., dir1,dir2)')
        string(name: 'ENTERENV', defaultValue: '', description: 'Enter the environment name')
        string(name: 'ENTERUSAGE', defaultValue: '', description: 'Enter the usage description')
        string(name: 'ENTERJENKINSNAME', defaultValue: '', description: 'Enter the Jenkins job name')
    }
    environment {
        TIMESTAMP = "${new Date().format('yyyyMMddHHmmss')}" // Generate timestamp
        DIRFILE = 'dir_list.txt'
    }
    stages {
        stage('Prepare Directory List') {
            steps {
                script {
                    // Validate ENTERDIR
                    if (!params.ENTERDIR?.trim()) {
                        error "Parameter ENTERDIR is empty. Please provide a comma-separated list of directories."
                    }

                    // Write the comma-separated values into a file
                    sh """
                        echo "${params.ENTERDIR}" | tr ',' '\\n' > ${DIRFILE}
                        echo "Directories to process:"
                        cat ${DIRFILE}
                    """
                }
            }
        }
        stage('Copy Directories') {
            steps {
                script {
                    sh """
                        while IFS= read -r dir; do
                            if [ -z "\$dir" ]; then
                                echo "Empty directory name found, skipping."
                                continue
                            fi

                            echo "Copying directory: \$dir"
                            SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"
                            DEST_URL="https://ur-sa-url/backups/${params.ENTERUSAGE}/${params.ENTERJENKINSNAME}/${TIMESTAMP}/\$dir"

                            # Perform the copy
                            echo "Copying from \$SOURCE_URL to \$DEST_URL"
                            azcopy cp "\$SOURCE_URL" "\$DEST_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Copy operation failed for directory: \$dir"
                                continue # Continue to the next directory even if this fails
                            fi

                            # Verify the copy
                            echo "Verifying copy for directory: \$dir"
                            azcopy list "\$DEST_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Verification failed for directory: \$dir"
                                continue # Continue to the next directory even if this fails
                            fi
                        done < ${DIRFILE}
                    """
                }
            }
        }
        stage('Delete Source Directories') {
            steps {
                script {
                    sh """
                        while IFS= read -r dir; do
                            if [ -z "\$dir" ]; then
                                echo "Empty directory name found, skipping."
                                continue
                            fi

                            echo "Deleting source directory: \$dir"
                            SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"

                            # Perform the deletion
                            azcopy remove "\$SOURCE_URL" --recursive=true
                            if [ \$? -ne 0 ]; then
                                echo "Delete operation failed for directory: \$dir"
                                continue # Continue to the next directory even if this fails
                            fi
                        done < ${DIRFILE}
                    """
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution completed."
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}

10:57AM 11-12-2024
pipeline {
    agent any
    parameters {
        string(name: 'ENTERDIR', defaultValue: '', description: 'Comma-separated list of directories (e.g., dir1,dir2)')
        string(name: 'ENTERENV', defaultValue: '', description: 'Enter the environment name')
        string(name: 'ENTERUSAGE', defaultValue: '', description: 'Enter the usage description')
        string(name: 'ENTERJENKINSNAME', defaultValue: '', description: 'Enter the Jenkins job name')
    }
    environment {
        TIMESTAMP = "${new Date().format('yyyyMMddHHmmss')}" // Generate timestamp
        DIRFILE = 'dir_list.txt'
    }
    stages {
        stage('Prepare Directory List') {
            steps {
                script {
                    // Validate ENTERDIR
                    if (!params.ENTERDIR?.trim()) {
                        error "Parameter ENTERDIR is empty. Please provide a comma-separated list of directories."
                    }

                    // Write the comma-separated values into a file
                    sh """
                        echo "${params.ENTERDIR}" | tr ',' '\\n' > ${DIRFILE}
                        echo "Directories to process:"
                        cat ${DIRFILE}
                    """
                }
            }
        }
        stage('Copy Directories') {
            steps {
                script {
                    sh """
                        while IFS= read -r dir; do
                            if [ -z "\$dir" ]; then
                                echo "Empty directory name found, skipping."
                                continue
                            fi

                            echo "Copying directory: \$dir"
                            SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"
                            DEST_URL="https://ur-sa-url/backups/${params.ENTERUSAGE}/${params.ENTERJENKINSNAME}/${TIMESTAMP}/\$dir"

                            # Copy the directory
                            echo "Copying from \$SOURCE_URL to \$DEST_URL"
                            azcopy cp "\$SOURCE_URL" "\$DEST_URL" --recursive=true || {
                                echo "Copy operation failed for directory: \$dir"
                                continue
                            }

                            # Verify the copy
                            echo "Verifying copy for directory: \$dir"
                            azcopy list "\$DEST_URL" --recursive=true || {
                                echo "Verification failed for directory: \$dir"
                                continue
                            }
                        done < ${DIRFILE}
                    """
                }
            }
        }
        stage('Delete Source Directories') {
            steps {
                script {
                    sh """
                        while IFS= read -r dir; do
                            if [ -z "\$dir" ]; then
                                echo "Empty directory name found, skipping."
                                continue
                            fi

                            echo "Deleting source directory: \$dir"
                            SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"

                            # Perform the deletion
                            azcopy remove "\$SOURCE_URL" --recursive=true || {
                                echo "Delete operation failed for directory: \$dir"
                                continue
                            }
                        done < ${DIRFILE}
                    """
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution completed."
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}

11-12-2024 11:35AM Dynamic time stamp handling fix timestamp when build starts
pipeline {
    agent any
    parameters {
        string(name: 'ENTERDIR', defaultValue: '', description: 'Comma-separated list of directories (e.g., dir1,dir2)')
        string(name: 'ENTERENV', defaultValue: '', description: 'Enter the environment name')
        string(name: 'ENTERUSAGE', defaultValue: '', description: 'Enter the usage description')
        string(name: 'ENTERJENKINSNAME', defaultValue: '', description: 'Enter the Jenkins job name')
    }
    environment {
        // Generate timestamp once when the pipeline starts
        TIMESTAMP = "${new Date().format('yyyyMMddHHmmss')}"
        DIRFILE = 'dir_list.txt'
    }
    stages {
        stage('Prepare Directory List') {
            steps {
                script {
                    // Validate ENTERDIR
                    if (!params.ENTERDIR?.trim()) {
                        error "Parameter ENTERDIR is empty. Please provide a comma-separated list of directories."
                    }

                    // Write the comma-separated values into a file
                    sh """
                        echo "${params.ENTERDIR}" | tr ',' '\\n' > ${DIRFILE}
                        echo "Directories to process:"
                        cat ${DIRFILE}
                    """
                }
            }
        }
        stage('Copy Directories') {
            steps {
                script {
                    sh """
                        while IFS= read -r dir; do
                            if [ -z "\$dir" ]; then
                                echo "Empty directory name found, skipping."
                                continue
                            fi

                            echo "Copying directory: \$dir"
                            SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"
                            DEST_URL="https://ur-sa-url/backups/${params.ENTERUSAGE}/${params.ENTERJENKINSNAME}/${TIMESTAMP}/\$dir"

                            # Copy the directory
                            echo "Copying from \$SOURCE_URL to \$DEST_URL"
                            azcopy cp "\$SOURCE_URL" "\$DEST_URL" --recursive=true || {
                                echo "Copy operation failed for directory: \$dir"
                                continue
                            }

                            # Verify the copy
                            echo "Verifying copy for directory: \$dir"
                            azcopy list "\$DEST_URL" --recursive=true || {
                                echo "Verification failed for directory: \$dir"
                                continue
                            }
                        done < ${DIRFILE}
                    """
                }
            }
        }
        stage('Delete Source Directories') {
            steps {
                script {
                    sh """
                        while IFS= read -r dir; do
                            if [ -z "\$dir" ]; then
                                echo "Empty directory name found, skipping."
                                continue
                            fi

                            echo "Deleting source directory: \$dir"
                            SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"

                            # Perform the deletion
                            azcopy remove "\$SOURCE_URL" --recursive=true || {
                                echo "Delete operation failed for directory: \$dir"
                                continue
                            }
                        done < ${DIRFILE}
                    """
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution completed."
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}

only stage. not looping 
stage('Copy Directories') {
    steps {
        script {
            sh """
                # Debug: Check contents of dir_list.txt
                echo "Contents of dir_list.txt:"
                cat ${DIRFILE}

                # Read and process each directory from the file
                while IFS= read -r dir || [ -n "\$dir" ]; do
                    if [ -z "\$dir" ]; then
                        echo "Empty directory name found, skipping."
                        continue
                    fi

                    echo "Processing directory: \$dir"

                    # Define source and destination URLs
                    SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"
                    DEST_URL="https://ur-sa-url/backups/${params.ENTERUSAGE}/${params.ENTERJENKINSNAME}/${TIMESTAMP}/\$dir"

                    # Copy the directory
                    echo "Copying from \$SOURCE_URL to \$DEST_URL"
                    azcopy cp "\$SOURCE_URL" "\$DEST_URL" --recursive=true
                    copy_status=\$?

                    if [ \$copy_status -ne 0 ]; then
                        echo "ERROR: Copy operation failed for \$dir. Skipping."
                        continue
                    fi

                    # Verify the copy
                    echo "Verifying copy for directory: \$dir"
                    azcopy list "\$DEST_URL" --recursive=true
                    verify_status=\$?

                    if [ \$verify_status -ne 0 ]; then
                        echo "ERROR: Verification failed for \$dir. Skipping."
                        continue
                    fi

                    echo "Copy and verification successful for \$dir"
                done < ${DIRFILE}
            """
        }
    }
}


For loop not while 
pipeline {
    agent any
    environment {
        TIMESTAMP = sh(script: "date +%Y%m%d%H%M%S", returnStdout: true).trim()
        DIRFILE = "dir_list.txt"
    }
    parameters {
        string(name: 'ENTERDIR', defaultValue: 'dir1,dir2', description: 'Comma-separated directories')
        string(name: 'ENTERENV', defaultValue: 'dev', description: 'Environment name')
        string(name: 'ENTERUSAGE', defaultValue: 'backup', description: 'Usage name')
        string(name: 'ENTERJENKINSNAME', defaultValue: 'jenkins', description: 'Jenkins name')
    }
    stages {
        stage('Prepare Directory List') {
            steps {
                script {
                    // Save the ENTERDIR parameter as a new line-separated file
                    sh """
                        echo '${params.ENTERDIR}' | tr ',' '\\n' > ${DIRFILE}
                        echo "Directory list prepared:"
                        cat ${DIRFILE}
                    """
                }
            }
        }
        stage('Copy Directories') {
            steps {
                script {
                    sh """
                        echo "Contents of dir_list.txt:"
                        cat ${DIRFILE}

                        for dir in \$(cat ${DIRFILE}); do
                            if [ -z "\$dir" ]; then
                                echo "Empty directory name found, skipping."
                                continue
                            fi

                            echo "Processing directory: \$dir"

                            SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"
                            DEST_URL="https://ur-sa-url/backups/${params.ENTERUSAGE}/${params.ENTERJENKINSNAME}/${TIMESTAMP}/\$dir"

                            echo "Copying from \$SOURCE_URL to \$DEST_URL"
                            azcopy cp "\$SOURCE_URL" "\$DEST_URL" --recursive=true
                            copy_status=\$?

                            if [ \$copy_status -ne 0 ]; then
                                echo "ERROR: Copy operation failed for \$dir. Skipping."
                                continue
                            fi

                            echo "Verifying copy for directory: \$dir"
                            azcopy list "\$DEST_URL" --recursive=true
                            verify_status=\$?

                            if [ \$verify_status -ne 0 ]; then
                                echo "ERROR: Verification failed for \$dir. Skipping."
                                continue
                            fi

                            echo "Copy and verification successful for \$dir"
                        done
                    """
                }
            }
        }
        stage('Delete Source Directories') {
            steps {
                script {
                    sh """
                        for dir in \$(cat ${DIRFILE}); do
                            if [ -z "\$dir" ]; then
                                echo "Empty directory name found, skipping."
                                continue
                            fi

                            echo "Deleting directory: \$dir"

                            SOURCE_URL="https://ur-sa-url/arti/${params.ENTERENV}/\$dir"
                            echo "Deleting \$SOURCE_URL"
                            azcopy remove "\$SOURCE_URL" --recursive=true
                            delete_status=\$?

                            if [ \$delete_status -ne 0 ]; then
                                echo "ERROR: Delete operation failed for \$dir. Skipping."
                                continue
                            fi

                            echo "Delete successful for \$dir"
                        done
                    """
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution completed."
        }
        success {
            echo "Pipeline executed successfully."
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}
