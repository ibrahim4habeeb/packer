pipeline {
    agent any
    environment {
        DDFILE = 'dd.txt' // Path to the file containing data disk names
    }
    parameters {
        string(name: 'SOURCE_RG', defaultValue: 'source-resource-group', description: 'Source Resource Group Name')
        string(name: 'TARGET_RG', defaultValue: 'target-resource-group', description: 'Target Resource Group Name')
    }
    stages {
        stage('Move Azure Data Disks') {
            steps {
                script {
                    // Ensure the file exists
                    if (!fileExists(env.DDFILE)) {
                        error "Disk file (${env.DDFILE}) not found!"
                    }

                    // Read the disk names from the file
                    def diskNames = readFile(env.DDFILE).readLines()

                    // Iterate over each disk and move it
                    diskNames.each { diskName ->
                        sh """
                        #!/bin/bash
                        echo "Fetching ID for disk: ${diskName}"
                        DISK_ID=\$(az disk show --name ${diskName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)
                        
                        if [ -n "\$DISK_ID" ]; then
                            echo "Moving disk: ${diskName} to resource group: ${params.TARGET_RG}"
                            az resource move --ids \$DISK_ID --destination-group ${params.TARGET_RG}
                        else
                            echo "Disk ID not found for disk: ${diskName}"
                        fi
                        """
                    }
                }
            }
        }
    }
}
=====
pipeline {
    agent any
    environment {
        DDFILE = 'dd.txt' // Path to the file containing data disk names
        SNAPSHOT_FILE = 'snapshots.txt' // Path to the file containing snapshot names
    }
    parameters {
        string(name: 'SOURCE_RG', defaultValue: 'source-resource-group', description: 'Source Resource Group Name')
        string(name: 'TARGET_RG', defaultValue: 'target-resource-group', description: 'Target Resource Group Name')
    }
    stages {
        stage('Validate Inputs') {
            steps {
                script {
                    def hasDataDisks = fileExists(env.DDFILE) && readFile(env.DDFILE).readLines().findAll { it?.trim() }.size() > 0
                    def hasSnapshots = fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0

                    if (!hasDataDisks && !hasSnapshots) {
                        error "Both Data Disk file (${env.DDFILE}) and Snapshot file (${env.SNAPSHOT_FILE}) are either missing or contain no valid entries!"
                    }

                    if (hasDataDisks) {
                        echo "Data Disk file (${env.DDFILE}) contains valid entries."
                    } else {
                        echo "No valid entries found in Data Disk file (${env.DDFILE}). Skipping data disk processing."
                    }

                    if (hasSnapshots) {
                        echo "Snapshot file (${env.SNAPSHOT_FILE}) contains valid entries."
                    } else {
                        echo "No valid entries found in Snapshot file (${env.SNAPSHOT_FILE}). Skipping snapshot processing."
                    }
                }
            }
        }

        stage('Move Resources') {
            parallel {
                stage('Move Azure Data Disks') {
                    when {
                        expression { fileExists(env.DDFILE) && readFile(env.DDFILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        script {
                            def diskNames = readFile(env.DDFILE).readLines().findAll { it?.trim() }

                            diskNames.each { diskName ->
                                sh """
                                #!/bin/bash
                                echo "Fetching ID for data disk: ${diskName}"
                                DISK_ID=\$(az disk show --name ${diskName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)
                                
                                if [ -n "\$DISK_ID" ]; then
                                    echo "Moving data disk: ${diskName} to resource group: ${params.TARGET_RG}"
                                    az resource move --ids \$DISK_ID --destination-group ${params.TARGET_RG}
                                else
                                    echo "Data disk ID not found for disk: ${diskName}. Please verify the name and source resource group."
                                fi
                                """
                            }
                        }
                    }
                }

                stage('Move Azure Snapshots') {
                    when {
                        expression { fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        script {
                            def snapshotNames = readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }

                            snapshotNames.each { snapshotName ->
                                sh """
                                #!/bin/bash
                                echo "Fetching ID for snapshot: ${snapshotName}"
                                SNAPSHOT_ID=\$(az snapshot show --name ${snapshotName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)
                                
                                if [ -n "\$SNAPSHOT_ID" ]; then
                                    echo "Moving snapshot: ${snapshotName} to resource group: ${params.TARGET_RG}"
                                    az resource move --ids \$SNAPSHOT_ID --destination-group ${params.TARGET_RG}
                                else
                                    echo "Snapshot ID not found for snapshot: ${snapshotName}. Please verify the name and source resource group."
                                fi
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Delete Resources') {
            parallel {
                stage('Delete Azure Data Disks') {
                    when {
                        expression { fileExists(env.DDFILE) && readFile(env.DDFILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        input {
                            message "Proceed to delete Azure Data Disks listed in ${env.DDFILE}?"
                            ok "Approve"
                        }
                        script {
                            def diskNames = readFile(env.DDFILE).readLines().findAll { it?.trim() }

                            diskNames.each { diskName ->
                                sh """
                                #!/bin/bash
                                echo "Fetching ID for data disk: ${diskName}"
                                DISK_ID=\$(az disk show --name ${diskName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)
                                
                                if [ -n "\$DISK_ID" ]; then
                                    echo "Deleting data disk: ${diskName} from resource group: ${params.SOURCE_RG}"
                                    az disk delete --name ${diskName} --resource-group ${params.SOURCE_RG} --yes
                                else
                                    echo "Data disk ID not found for disk: ${diskName}. Please verify the name and source resource group."
                                fi
                                """
                            }
                        }
                    }
                }

                stage('Delete Azure Snapshots') {
                    when {
                        expression { fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        input {
                            message "Proceed to delete Azure Snapshots listed in ${env.SNAPSHOT_FILE}?"
                            ok "Approve"
                        }
                        script {
                            def snapshotNames = readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }

                            snapshotNames.each { snapshotName ->
                                sh """
                                #!/bin/bash
                                echo "Fetching ID for snapshot: ${snapshotName}"
                                SNAPSHOT_ID=\$(az snapshot show --name ${snapshotName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)
                                
                                if [ -n "\$SNAPSHOT_ID" ]; then
                                    echo "Deleting snapshot: ${snapshotName} from resource group: ${params.SOURCE_RG}"
                                    az snapshot delete --name ${snapshotName} --resource-group ${params.SOURCE_RG} --yes
                                else
                                    echo "Snapshot ID not found for snapshot: ${snapshotName}. Please verify the name and source resource group."
                                fi
                                """
                            }
                        }
                    }
                }
            }
        }
    }
}
***************
pipeline {
    agent any
    environment {
        DDFILE = 'dd.txt' // Path to the file containing data disk names
        SNAPSHOT_FILE = 'snapshots.txt' // Path to the file containing snapshot names
    }
    parameters {
        string(name: 'SOURCE_RG', defaultValue: 'source-resource-group', description: 'Source Resource Group Name')
        string(name: 'TARGET_RG', defaultValue: 'target-resource-group', description: 'Target Resource Group Name')
    }
    stages {
        stage('Validate Inputs') {
            steps {
                script {
                    def hasDataDisks = fileExists(env.DDFILE) && readFile(env.DDFILE).readLines().findAll { it?.trim() }.size() > 0
                    def hasSnapshots = fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0

                    if (!hasDataDisks && !hasSnapshots) {
                        error "Both Data Disk file (${env.DDFILE}) and Snapshot file (${env.SNAPSHOT_FILE}) are either missing or contain no valid entries!"
                    }

                    if (hasDataDisks) {
                        echo "Data Disk file (${env.DDFILE}) contains valid entries."
                    } else {
                        echo "No valid entries found in Data Disk file (${env.DDFILE}). Skipping data disk processing."
                    }

                    if (hasSnapshots) {
                        echo "Snapshot file (${env.SNAPSHOT_FILE}) contains valid entries."
                    } else {
                        echo "No valid entries found in Snapshot file (${env.SNAPSHOT_FILE}). Skipping snapshot processing."
                    }
                }
            }
        }

        stage('Move Resources') {
            parallel {
                stage('Move Azure Data Disks') {
                    when {
                        expression { fileExists(env.DDFILE) && readFile(env.DDFILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        input {
                            message "Do you want to proceed with moving Azure Data Disks listed in ${env.DDFILE}?"
                            ok "Approve Move"
                        }
                        script {
                            def diskNames = readFile(env.DDFILE).readLines().findAll { it?.trim() }

                            diskNames.each { diskName ->
                                sh """
                                #!/bin/bash
                                echo "Fetching ID for data disk: ${diskName}"
                                DISK_ID=\$(az disk show --name ${diskName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)
                                
                                if [ -n "\$DISK_ID" ]; then
                                    echo "Moving data disk: ${diskName} to resource group: ${params.TARGET_RG}"
                                    az resource move --ids \$DISK_ID --destination-group ${params.TARGET_RG}
                                else
                                    echo "Data disk ID not found for disk: ${diskName}. Please verify the name and source resource group."
                                fi
                                """
                            }
                        }
                    }
                }

                stage('Move Azure Snapshots') {
                    when {
                        expression { fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        input {
                            message "Do you want to proceed with moving Azure Snapshots listed in ${env.SNAPSHOT_FILE}?"
                            ok "Approve Move"
                        }
                        script {
                            def snapshotNames = readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }

                            snapshotNames.each { snapshotName ->
                                sh """
                                #!/bin/bash
                                echo "Fetching ID for snapshot: ${snapshotName}"
                                SNAPSHOT_ID=\$(az snapshot show --name ${snapshotName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)
                                
                                if [ -n "\$SNAPSHOT_ID" ]; then
                                    echo "Moving snapshot: ${snapshotName} to resource group: ${params.TARGET_RG}"
                                    az resource move --ids \$SNAPSHOT_ID --destination-group ${params.TARGET_RG}
                                else
                                    echo "Snapshot ID not found for snapshot: ${snapshotName}. Please verify the name and source resource group."
                                fi
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Delete Resources') {
            parallel {
                stage('Delete Azure Data Disks') {
                    when {
                        expression { fileExists(env.DDFILE) && readFile(env.DDFILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        input {
                            message "Do you want to proceed with deleting Azure Data Disks listed in ${env.DDFILE}?"
                            ok "Approve Delete"
                        }
                        script {
                            def diskNames = readFile(env.DDFILE).readLines().findAll { it?.trim() }

                            diskNames.each { diskName ->
                                sh """
                                #!/bin/bash
                                echo "Fetching ID for data disk: ${diskName}"
                                DISK_ID=\$(az disk show --name ${diskName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)
                                
                                if [ -n "\$DISK_ID" ]; then
                                    echo "Deleting data disk: ${diskName} from resource group: ${params.SOURCE_RG}"
                                    az disk delete --name ${diskName} --resource-group ${params.SOURCE_RG} --yes
                                else
                                    echo "Data disk ID not found for disk: ${diskName}. Please verify the name and source resource group."
                                fi
                                """
                            }
                        }
                    }
                }

                stage('Delete Azure Snapshots') {
                    when {
                        expression { fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        input {
                            message "Do you want to proceed with deleting Azure Snapshots listed in ${env.SNAPSHOT_FILE}?"
                            ok "Approve Delete"
                        }
                        script {
                            def snapshotNames = readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }

                            snapshotNames.each { snapshotName ->
                                sh """
                                #!/bin/bash
                                echo "Fetching ID for snapshot: ${snapshotName}"
                                SNAPSHOT_ID=\$(az snapshot show --name ${snapshotName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)
                                
                                if [ -n "\$SNAPSHOT_ID" ]; then
                                    echo "Deleting snapshot: ${snapshotName} from resource group: ${params.SOURCE_RG}"
                                    az snapshot delete --name ${snapshotName} --resource-group ${params.SOURCE_RG} --yes
                                else
                                    echo "Snapshot ID not found for snapshot: ${snapshotName}. Please verify the name and source resource group."
                                fi
                                """
                            }
                        }
                    }
                }
            }
        }
    }
}
try - catch method 
pipeline {
    agent any
    environment {
        DDFILE = 'dd.txt' // Path to the file containing data disk names
        SNAPSHOT_FILE = 'snapshots.txt' // Path to the file containing snapshot names
    }
    parameters {
        string(name: 'SOURCE_RG', defaultValue: 'source-resource-group', description: 'Source Resource Group Name')
        string(name: 'TARGET_RG', defaultValue: 'target-resource-group', description: 'Target Resource Group Name')
    }
    stages {
        stage('Validate Inputs') {
            steps {
                script {
                    def hasDataDisks = fileExists(env.DDFILE) && readFile(env.DDFILE).readLines().findAll { it?.trim() }.size() > 0
                    def hasSnapshots = fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0

                    if (!hasDataDisks && !hasSnapshots) {
                        error "Both Data Disk file (${env.DDFILE}) and Snapshot file (${env.SNAPSHOT_FILE}) are either missing or contain no valid entries!"
                    }

                    if (hasDataDisks) {
                        echo "Data Disk file (${env.DDFILE}) contains valid entries."
                    } else {
                        echo "No valid entries found in Data Disk file (${env.DDFILE}). Skipping data disk processing."
                    }

                    if (hasSnapshots) {
                        echo "Snapshot file (${env.SNAPSHOT_FILE}) contains valid entries."
                    } else {
                        echo "No valid entries found in Snapshot file (${env.SNAPSHOT_FILE}). Skipping snapshot processing."
                    }
                }
            }
        }

        stage('Move Resources') {
            parallel {
                stage('Move Azure Data Disks') {
                    when {
                        expression { fileExists(env.DDFILE) && readFile(env.DDFILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        script {
                            try {
                                input {
                                    message "Do you want to proceed with moving Azure Data Disks listed in ${env.DDFILE}?"
                                    ok "Approve Move"
                                }

                                def diskNames = readFile(env.DDFILE).readLines().findAll { it?.trim() }
                                diskNames.each { diskName ->
                                    sh """
                                    #!/bin/bash
                                    echo "Fetching ID for data disk: ${diskName}"
                                    DISK_ID=\$(az disk show --name ${diskName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)

                                    if [ -n "\$DISK_ID" ]; then
                                        echo "Moving data disk: ${diskName} to resource group: ${params.TARGET_RG}"
                                        az resource move --ids \$DISK_ID --destination-group ${params.TARGET_RG}
                                    else
                                        echo "Data disk ID not found for disk: ${diskName}. Please verify the name and source resource group."
                                    fi
                                    """
                                }
                            } catch (err) {
                                echo "Move Azure Data Disks stage aborted by user: ${err.message}"
                            }
                        }
                    }
                }

                stage('Move Azure Snapshots') {
                    when {
                        expression { fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        script {
                            try {
                                input {
                                    message "Do you want to proceed with moving Azure Snapshots listed in ${env.SNAPSHOT_FILE}?"
                                    ok "Approve Move"
                                }

                                def snapshotNames = readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }
                                snapshotNames.each { snapshotName ->
                                    sh """
                                    #!/bin/bash
                                    echo "Fetching ID for snapshot: ${snapshotName}"
                                    SNAPSHOT_ID=\$(az snapshot show --name ${snapshotName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)

                                    if [ -n "\$SNAPSHOT_ID" ]; then
                                        echo "Moving snapshot: ${snapshotName} to resource group: ${params.TARGET_RG}"
                                        az resource move --ids \$SNAPSHOT_ID --destination-group ${params.TARGET_RG}
                                    else
                                        echo "Snapshot ID not found for snapshot: ${snapshotName}. Please verify the name and source resource group."
                                    fi
                                    """
                                }
                            } catch (err) {
                                echo "Move Azure Snapshots stage aborted by user: ${err.message}"
                            }
                        }
                    }
                }
            }
        }

        stage('Delete Resources') {
            parallel {
                stage('Delete Azure Data Disks') {
                    when {
                        expression { fileExists(env.DDFILE) && readFile(env.DDFILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        script {
                            try {
                                input {
                                    message "Do you want to proceed with deleting Azure Data Disks listed in ${env.DDFILE}?"
                                    ok "Approve Delete"
                                }

                                def diskNames = readFile(env.DDFILE).readLines().findAll { it?.trim() }
                                diskNames.each { diskName ->
                                    sh """
                                    #!/bin/bash
                                    echo "Fetching ID for data disk: ${diskName}"
                                    DISK_ID=\$(az disk show --name ${diskName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)

                                    if [ -n "\$DISK_ID" ]; then
                                        echo "Deleting data disk: ${diskName} from resource group: ${params.SOURCE_RG}"
                                        az disk delete --name ${diskName} --resource-group ${params.SOURCE_RG} --yes
                                    else
                                        echo "Data disk ID not found for disk: ${diskName}. Please verify the name and source resource group."
                                    fi
                                    """
                                }
                            } catch (err) {
                                echo "Delete Azure Data Disks stage aborted by user: ${err.message}"
                            }
                        }
                    }
                }

                stage('Delete Azure Snapshots') {
                    when {
                        expression { fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        script {
                            try {
                                input {
                                    message "Do you want to proceed with deleting Azure Snapshots listed in ${env.SNAPSHOT_FILE}?"
                                    ok "Approve Delete"
                                }

                                def snapshotNames = readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }
                                snapshotNames.each { snapshotName ->
                                    sh """
                                    #!/bin/bash
                                    echo "Fetching ID for snapshot: ${snapshotName}"
                                    SNAPSHOT_ID=\$(az snapshot show --name ${snapshotName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)

                                    if [ -n "\$SNAPSHOT_ID" ]; then
                                        echo "Deleting snapshot: ${snapshotName} from resource group: ${params.SOURCE_RG}"
                                        az snapshot delete --name ${snapshotName} --resource-group ${params.SOURCE_RG} --yes
                                    else
                                        echo "Snapshot ID not found for snapshot: ${snapshotName}. Please verify the name and source resource group."
                                    fi
                                    """
                                }
                            } catch (err) {
                                echo "Delete Azure Snapshots stage aborted by user: ${err.message}"
                            }
                        }
                    }
                }
            }
        }
    }
}
