
pipeline {
    agent any
    environment {
        DDFILE = 'dd.txt' // File containing Data Disk names
        SNAPSHOT_FILE = 'snapshots.txt' // File containing Snapshot names
        ADDITIONAL_TAGS = 'Environment=Production,Owner=Jenkins' // Custom tags for target RG
    }
    parameters {
        string(name: 'SOURCE_RG', defaultValue: 'source-resource-group', description: 'Source Resource Group Name')
        string(name: 'TARGET_RG', defaultValue: 'target-resource-group', description: 'Target Resource Group Name')
    }
    stages {
        stage('Validate Inputs') {
            steps {
                script {
                    def hasDataDisks = fileExists(env.DDFILE) && readFile(env.DDFILE).readLines().findAll { it?.trim() }.size() > 0
                    def hasSnapshots = fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0

                    if (!hasDataDisks && !hasSnapshots) {
                        error "Both Data Disk file (${env.DDFILE}) and Snapshot file (${env.SNAPSHOT_FILE}) are either missing or contain no valid entries!"
                    }
                }
            }
        }

        stage('Move Resources') {
            parallel {
                stage('Move Azure Data Disks') {
                    when {
                        expression { fileExists(env.DDFILE) && readFile(env.DDFILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        input {
                            message "Do you want to proceed with moving Azure Data Disks listed in ${env.DDFILE}?"
                            ok "Approve Move"
                        }
                        script {
                            def diskNames = readFile(env.DDFILE).readLines().findAll { it?.trim() }
                            diskNames.each { diskName ->
                                sh """
                                #!/bin/bash
                                echo "Fetching details for data disk: ${diskName}"
                                DISK_ID=\$(az disk show --name ${diskName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)
                                DISK_TAGS=\$(az disk show --name ${diskName} --resource-group ${params.SOURCE_RG} --query "tags" -o json)
                                
                                if [ -n "\$DISK_ID" ]; then
                                    echo "Moving disk: ${diskName} to ${params.TARGET_RG}"
                                    az resource move --ids \$DISK_ID --destination-group ${params.TARGET_RG}

                                    echo "Updating tags for disk: ${diskName} in target resource group"
                                    COMBINED_TAGS=\$(echo "\$DISK_TAGS" | jq -c --argjson additional '{${env.ADDITIONAL_TAGS}}' '. + \$additional')
                                    az disk update --name ${diskName} --resource-group ${params.TARGET_RG} --tags "\$COMBINED_TAGS"
                                else
                                    echo "Data disk ID not found for ${diskName}"
                                fi
                                """
                            }
                        }
                    }
                }

                stage('Move Azure Snapshots') {
                    when {
                        expression { fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        input {
                            message "Do you want to proceed with moving Azure Snapshots listed in ${env.SNAPSHOT_FILE}?"
                            ok "Approve Move"
                        }
                        script {
                            def snapshotNames = readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }
                            snapshotNames.each { snapshotName ->
                                sh """
                                #!/bin/bash
                                echo "Fetching details for snapshot: ${snapshotName}"
                                SNAPSHOT_ID=\$(az snapshot show --name ${snapshotName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)
                                SNAPSHOT_TAGS=\$(az snapshot show --name ${snapshotName} --resource-group ${params.SOURCE_RG} --query "tags" -o json)

                                if [ -n "\$SNAPSHOT_ID" ]; then
                                    echo "Moving snapshot: ${snapshotName} to ${params.TARGET_RG}"
                                    az resource move --ids \$SNAPSHOT_ID --destination-group ${params.TARGET_RG}

                                    echo "Updating tags for snapshot: ${snapshotName} in target resource group"
                                    COMBINED_TAGS=\$(echo "\$SNAPSHOT_TAGS" | jq -c --argjson additional '{${env.ADDITIONAL_TAGS}}' '. + \$additional')
                                    az snapshot update --name ${snapshotName} --resource-group ${params.TARGET_RG} --tags "\$COMBINED_TAGS"
                                else
                                    echo "Snapshot ID not found for ${snapshotName}"
                                fi
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Delete Resources') {
            parallel {
                stage('Delete Azure Data Disks') {
                    when {
                        expression { fileExists(env.DDFILE) && readFile(env.DDFILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        input {
                            message "Do you want to proceed with deleting Azure Data Disks listed in ${env.DDFILE}?"
                            ok "Approve Delete"
                        }
                        script {
                            def diskNames = readFile(env.DDFILE).readLines().findAll { it?.trim() }
                            diskNames.each { diskName ->
                                sh """
                                #!/bin/bash
                                echo "Deleting data disk: ${diskName}"
                                az disk delete --name ${diskName} --resource-group ${params.TARGET_RG} --yes
                                """
                            }
                        }
                    }
                }

                stage('Delete Azure Snapshots') {
                    when {
                        expression { fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        input {
                            message "Do you want to proceed with deleting Azure Snapshots listed in ${env.SNAPSHOT_FILE}?"
                            ok "Approve Delete"
                        }
                        script {
                            def snapshotNames = readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }
                            snapshotNames.each { snapshotName ->
                                sh """
                                #!/bin/bash
                                echo "Deleting snapshot: ${snapshotName}"
                                az snapshot delete --name ${snapshotName} --resource-group ${params.TARGET_RG} --yes
                                """
                            }
                        }
                    }
                }
            }
        }
    }
}
Invalid jq invalid json text passed to --argjson
DISK_TAGS=\$(az disk show --name ${diskName} --resource-group ${params.SOURCE_RG} --query "tags" -o json || echo '{}')
COMBINED_TAGS=\$(echo "\$DISK_TAGS" | jq -c --arg newtags "Environment=Production,Owner=Jenkins" '
    . + ([$newtags | split(",") | map(split("=")) | map({(.[0]): .[1]})] | add)
')

echo "Updating tags for data disk: ${diskName}"
az disk update --name ${diskName} --resource-group ${params.TARGET_RG} --tags "\$COMBINED_TAGS"
SNAPSHOT_TAGS=\$(az snapshot show --name ${snapshotName} --resource-group ${params.SOURCE_RG} --query "tags" -o json || echo '{}')
COMBINED_TAGS=\$(echo "\$SNAPSHOT_TAGS" | jq -c --arg newtags "Environment=Production,Owner=Jenkins" '
    . + ([$newtags | split(",") | map(split("=")) | map({(.[0]): .[1]})] | add)
')

echo "Updating tags for snapshot: ${snapshotName}"
az snapshot update --name ${snapshotName} --resource-group ${params.TARGET_RG} --tags "\$COMBINED_TAGS"

error No such property newtags for class groovy.lang.Vinding
pipeline {
    agent any
    environment {
        DDFILE = 'dd.txt' // Path to the file containing data disk names
        SNAPSHOT_FILE = 'snapshots.txt' // Path to the file containing snapshot names
    }
    parameters {
        string(name: 'SOURCE_RG', defaultValue: 'source-resource-group', description: 'Source Resource Group Name')
        string(name: 'TARGET_RG', defaultValue: 'target-resource-group', description: 'Target Resource Group Name')
    }
    stages {
        stage('Move Azure Data Disks with Tags') {
            when {
                expression { fileExists(env.DDFILE) && readFile(env.DDFILE).readLines().findAll { it?.trim() }.size() > 0 }
            }
            steps {
                script {
                    def diskNames = readFile(env.DDFILE).readLines().findAll { it?.trim() }

                    diskNames.each { diskName ->
                        sh """
                        #!/bin/bash
                        echo "Fetching existing tags for data disk: ${diskName}"
                        DISK_TAGS=\$(az disk show --name ${diskName} --resource-group ${params.SOURCE_RG} --query "tags" -o json || echo '{}')

                        # Merge existing tags with additional tags
                        ADDITIONAL_TAGS="Environment=Production,Owner=Jenkins"
                        COMBINED_TAGS=\$(echo "\$DISK_TAGS" | jq -c --arg newtags "\$ADDITIONAL_TAGS" '
                            . + ([$newtags | split(",") | map(split("=")) | map({(.[0]): .[1]})] | add)
                        ')

                        echo "Moving data disk: ${diskName} with updated tags"
                        az disk update --name ${diskName} --resource-group ${params.SOURCE_RG} --tags "\$COMBINED_TAGS"
                        az resource move --ids \$(az disk show --name ${diskName} --resource-group ${params.SOURCE_RG} --query id -o tsv) --destination-group ${params.TARGET_RG}
                        """
                    }
                }
            }
        }

        stage('Move Azure Snapshots with Tags') {
            when {
                expression { fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0 }
            }
            steps {
                script {
                    def snapshotNames = readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }

                    snapshotNames.each { snapshotName ->
                        sh """
                        #!/bin/bash
                        echo "Fetching existing tags for snapshot: ${snapshotName}"
                        SNAPSHOT_TAGS=\$(az snapshot show --name ${snapshotName} --resource-group ${params.SOURCE_RG} --query "tags" -o json || echo '{}')

                        # Merge existing tags with additional tags
                        ADDITIONAL_TAGS="Environment=Production,Owner=Jenkins"
                        COMBINED_TAGS=\$(echo "\$SNAPSHOT_TAGS" | jq -c --arg newtags "\$ADDITIONAL_TAGS" '
                            . + ([$newtags | split(",") | map(split("=")) | map({(.[0]): .[1]})] | add)
                        ')

                        echo "Moving snapshot: ${snapshotName} with updated tags"
                        az snapshot update --name ${snapshotName} --resource-group ${params.SOURCE_RG} --tags "\$COMBINED_TAGS"
                        az resource move --ids \$(az snapshot show --name ${snapshotName} --resource-group ${params.SOURCE_RG} --query id -o tsv) --destination-group ${params.TARGET_RG}
                        """
                    }
                }
            }
        }
    }
}

single qutos for groovy interpolation 
pipeline {
    agent any
    environment {
        DDFILE = 'dd.txt' // Path to the file containing data disk names
        SNAPSHOT_FILE = 'snapshots.txt' // Path to the file containing snapshot names
    }
    parameters {
        string(name: 'SOURCE_RG', defaultValue: 'source-resource-group', description: 'Source Resource Group Name')
        string(name: 'TARGET_RG', defaultValue: 'target-resource-group', description: 'Target Resource Group Name')
    }
    stages {
        stage('Move Azure Data Disks with Tags') {
            when {
                expression { fileExists(env.DDFILE) && readFile(env.DDFILE).readLines().findAll { it?.trim() }.size() > 0 }
            }
            steps {
                script {
                    def diskNames = readFile(env.DDFILE).readLines().findAll { it?.trim() }

                    diskNames.each { diskName ->
                        sh '''
                        #!/bin/bash
                        echo "Fetching existing tags for data disk: ''' + diskName + '''"
                        DISK_TAGS=$(az disk show --name ''' + diskName + ''' --resource-group ${SOURCE_RG} --query "tags" -o json || echo '{}')

                        # Merge existing tags with additional tags
                        ADDITIONAL_TAGS="Environment=Production,Owner=Jenkins"
                        COMBINED_TAGS=$(echo "$DISK_TAGS" | jq -c --argjson newtags "$(echo "$ADDITIONAL_TAGS" | jq -nR '[split(",") | map(split("=")) | map({(.[0]): .[1]})] | add')" '
                            . + $newtags
                        ')

                        echo "Moving data disk: ''' + diskName + ''' with updated tags"
                        az disk update --name ''' + diskName + ''' --resource-group ${SOURCE_RG} --tags "$COMBINED_TAGS"
                        az resource move --ids $(az disk show --name ''' + diskName + ''' --resource-group ${SOURCE_RG} --query id -o tsv) --destination-group ${TARGET_RG}
                        '''
                    }
                }
            }
        }

        stage('Move Azure Snapshots with Tags') {
            when {
                expression { fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0 }
            }
            steps {
                script {
                    def snapshotNames = readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }

                    snapshotNames.each { snapshotName ->
                        sh '''
                        #!/bin/bash
                        echo "Fetching existing tags for snapshot: ''' + snapshotName + '''"
                        SNAPSHOT_TAGS=$(az snapshot show --name ''' + snapshotName + ''' --resource-group ${SOURCE_RG} --query "tags" -o json || echo '{}')

                        # Merge existing tags with additional tags
                        ADDITIONAL_TAGS="Environment=Production,Owner=Jenkins"
                        COMBINED_TAGS=$(echo "$SNAPSHOT_TAGS" | jq -c --argjson newtags "$(echo "$ADDITIONAL_TAGS" | jq -nR '[split(",") | map(split("=")) | map({(.[0]): .[1]})] | add')" '
                            . + $newtags
                        ')

                        echo "Moving snapshot: ''' + snapshotName + ''' with updated tags"
                        az snapshot update --name ''' + snapshotName + ''' --resource-group ${SOURCE_RG} --tags "$COMBINED_TAGS"
                        az resource move --ids $(az snapshot show --name ''' + snapshotName + ''' --resource-group ${SOURCE_RG} --query id -o tsv) --destination-group ${TARGET_RG}
                        '''
                    }
                }
            }
        }
    }
}
#######################
pipeline {
    agent any
    environment {
        DDFILE = 'dd.txt' // Path to the file containing data disk names
        SNAPSHOT_FILE = 'snapshots.txt' // Path to the file containing snapshot names
    }
    parameters {
        string(name: 'SOURCE_RG', defaultValue: 'source-resource-group', description: 'Source Resource Group Name')
        string(name: 'TARGET_RG', defaultValue: 'target-resource-group', description: 'Target Resource Group Name')
    }
    stages {
        stage("Move Azure Data Disks with Tags") {
            when {
                expression { fileExists(env.DDFILE) && readFile(env.DDFILE).readLines().findAll { it?.trim() }.size() > 0 }
            }
            steps {
                script {
                    def diskNames = readFile(env.DDFILE).readLines().findAll { it?.trim() }

                    diskNames.each { diskName ->
                        sh """
                        #!/bin/bash
                        echo "Fetching existing tags for data disk: ${diskName}"
                        DISK_TAGS=\$(az disk show --name ${diskName} --resource-group ${params.SOURCE_RG} --query "tags" -o json || echo '{}')

                        # Define additional tags to be added
                        ADDITIONAL_TAGS="Environment=Production,Owner=Jenkins"
                        
                        # Convert additional tags into JSON format
                        NEW_TAGS_JSON=\$(echo \"\$ADDITIONAL_TAGS\" | jq -nR '[split(",") | map(split("=")) | map({(.[0]): .[1]})] | add')

                        # Merge existing tags with additional tags
                        COMBINED_TAGS=\$(echo "\$DISK_TAGS" | jq -c --argjson newtags "\$NEW_TAGS_JSON" '. + \$newtags')

                        echo "Updating tags for data disk: ${diskName}"
                        az disk update --name ${diskName} --resource-group ${params.SOURCE_RG} --tags "\$COMBINED_TAGS"

                        echo "Moving data disk: ${diskName} to resource group: ${params.TARGET_RG}"
                        az resource move --ids \$(az disk show --name ${diskName} --resource-group ${params.SOURCE_RG} --query id -o tsv) --destination-group ${params.TARGET_RG}
                        """
                    }
                }
            }
        }

        stage("Move Azure Snapshots with Tags") {
            when {
                expression { fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0 }
            }
            steps {
                script {
                    def snapshotNames = readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }

                    snapshotNames.each { snapshotName ->
                        sh """
                        #!/bin/bash
                        echo "Fetching existing tags for snapshot: ${snapshotName}"
                        SNAPSHOT_TAGS=\$(az snapshot show --name ${snapshotName} --resource-group ${params.SOURCE_RG} --query "tags" -o json || echo '{}')

                        # Define additional tags to be added
                        ADDITIONAL_TAGS="Environment=Production,Owner=Jenkins"

                        # Convert additional tags into JSON format
                        NEW_TAGS_JSON=\$(echo \"\$ADDITIONAL_TAGS\" | jq -nR '[split(",") | map(split("=")) | map({(.[0]): .[1]})] | add')

                        # Merge existing tags with additional tags
                        COMBINED_TAGS=\$(echo "\$SNAPSHOT_TAGS" | jq -c --argjson newtags "\$NEW_TAGS_JSON" '. + \$newtags')

                        echo "Updating tags for snapshot: ${snapshotName}"
                        az snapshot update --name ${snapshotName} --resource-group ${params.SOURCE_RG} --tags "\$COMBINED_TAGS"

                        echo "Moving snapshot: ${snapshotName} to resource group: ${params.TARGET_RG}"
                        az resource move --ids \$(az snapshot show --name ${snapshotName} --resource-group ${params.SOURCE_RG} --query id -o tsv) --destination-group ${params.TARGET_RG}
                        """
                    }
                }
            }
        }
    }
}
datdisk block
#!/bin/bash
echo "Fetching existing tags for data disk: ${diskName}"
DISK_TAGS=$(az disk show --name ${diskName} --resource-group ${params.SOURCE_RG} --query "tags" -o json || echo '{}')

# Define additional tags to be added
ADDITIONAL_TAGS="Environment=Production,Owner=Jenkins"

# Ensure ADDITIONAL_TAGS is a valid string
if [[ -z "${ADDITIONAL_TAGS}" ]]; then
    echo "Error: ADDITIONAL_TAGS is empty."
    exit 1
fi

# Convert additional tags into JSON format
NEW_TAGS_JSON=$(echo "${ADDITIONAL_TAGS}" | jq -nR '[split(",") | map(split("=")) | map({(.[0]): .[1]})] | add')

# Merge existing tags with additional tags
COMBINED_TAGS=$(echo "${DISK_TAGS}" | jq -c --argjson newtags "${NEW_TAGS_JSON}" '. + $newtags')

echo "Updating tags for data disk: ${diskName}"
az disk update --name ${diskName} --resource-group ${params.SOURCE_RG} --tags "${COMBINED_TAGS}"
without additional tags
============
pipeline {
    agent any
    environment {
        DDFILE = 'dd.txt' // Path to the file containing data disk names
        SNAPSHOT_FILE = 'snapshots.txt' // Path to the file containing snapshot names
    }
    parameters {
        string(name: 'SOURCE_RG', defaultValue: 'source-resource-group', description: 'Source Resource Group Name')
        string(name: 'TARGET_RG', defaultValue: 'target-resource-group', description: 'Target Resource Group Name')
    }
    stages {
        stage('Validate Inputs') {
            steps {
                script {
                    def hasDataDisks = fileExists(env.DDFILE) && readFile(env.DDFILE).readLines().findAll { it?.trim() }.size() > 0
                    def hasSnapshots = fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0

                    if (!hasDataDisks && !hasSnapshots) {
                        error "Both Data Disk file (${env.DDFILE}) and Snapshot file (${env.SNAPSHOT_FILE}) are either missing or contain no valid entries!"
                    }

                    if (hasDataDisks) {
                        echo "Data Disk file (${env.DDFILE}) contains valid entries."
                    } else {
                        echo "No valid entries found in Data Disk file (${env.DDFILE}). Skipping data disk processing."
                    }

                    if (hasSnapshots) {
                        echo "Snapshot file (${env.SNAPSHOT_FILE}) contains valid entries."
                    } else {
                        echo "No valid entries found in Snapshot file (${env.SNAPSHOT_FILE}). Skipping snapshot processing."
                    }
                }
            }
        }

        stage('Move Resources') {
            parallel {
                stage('Move Azure Data Disks') {
                    when {
                        expression { fileExists(env.DDFILE) && readFile(env.DDFILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        input {
                            message "Do you want to proceed with moving Azure Data Disks listed in ${env.DDFILE}?"
                            ok "Approve Move"
                        }
                        script {
                            def diskNames = readFile(env.DDFILE).readLines().findAll { it?.trim() }

                            diskNames.each { diskName ->
                                sh """
                                #!/bin/bash
                                echo "Fetching ID for data disk: ${diskName}"
                                DISK_ID=\$(az disk show --name ${diskName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)
                                
                                if [ -n "\$DISK_ID" ]; then
                                    echo "Moving data disk: ${diskName} to resource group: ${params.TARGET_RG}"
                                    az resource move --ids \$DISK_ID --destination-group ${params.TARGET_RG}
                                else
                                    echo "Data disk ID not found for disk: ${diskName}. Please verify the name and source resource group."
                                fi
                                """
                            }
                        }
                    }
                }

                stage('Move Azure Snapshots') {
                    when {
                        expression { fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        input {
                            message "Do you want to proceed with moving Azure Snapshots listed in ${env.SNAPSHOT_FILE}?"
                            ok "Approve Move"
                        }
                        script {
                            def snapshotNames = readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }

                            snapshotNames.each { snapshotName ->
                                sh """
                                #!/bin/bash
                                echo "Fetching ID for snapshot: ${snapshotName}"
                                SNAPSHOT_ID=\$(az snapshot show --name ${snapshotName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)
                                
                                if [ -n "\$SNAPSHOT_ID" ]; then
                                    echo "Moving snapshot: ${snapshotName} to resource group: ${params.TARGET_RG}"
                                    az resource move --ids \$SNAPSHOT_ID --destination-group ${params.TARGET_RG}
                                else
                                    echo "Snapshot ID not found for snapshot: ${snapshotName}. Please verify the name and source resource group."
                                fi
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Delete Resources') {
            parallel {
                stage('Delete Azure Data Disks') {
                    when {
                        expression { fileExists(env.DDFILE) && readFile(env.DDFILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        input {
                            message "Do you want to proceed with deleting Azure Data Disks listed in ${env.DDFILE}?"
                            ok "Approve Delete"
                        }
                        script {
                            def diskNames = readFile(env.DDFILE).readLines().findAll { it?.trim() }

                            diskNames.each { diskName ->
                                sh """
                                #!/bin/bash
                                echo "Fetching ID for data disk: ${diskName}"
                                DISK_ID=\$(az disk show --name ${diskName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)
                                
                                if [ -n "\$DISK_ID" ]; then
                                    echo "Deleting data disk: ${diskName} from resource group: ${params.SOURCE_RG}"
                                    az disk delete --name ${diskName} --resource-group ${params.SOURCE_RG} --yes
                                else
                                    echo "Data disk ID not found for disk: ${diskName}. Please verify the name and source resource group."
                                fi
                                """
                            }
                        }
                    }
                }

                stage('Delete Azure Snapshots') {
                    when {
                        expression { fileExists(env.SNAPSHOT_FILE) && readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }.size() > 0 }
                    }
                    steps {
                        input {
                            message "Do you want to proceed with deleting Azure Snapshots listed in ${env.SNAPSHOT_FILE}?"
                            ok "Approve Delete"
                        }
                        script {
                            def snapshotNames = readFile(env.SNAPSHOT_FILE).readLines().findAll { it?.trim() }

                            snapshotNames.each { snapshotName ->
                                sh """
                                #!/bin/bash
                                echo "Fetching ID for snapshot: ${snapshotName}"
                                SNAPSHOT_ID=\$(az snapshot show --name ${snapshotName} --resource-group ${params.SOURCE_RG} --query "id" -o tsv)
                                
                                if [ -n "\$SNAPSHOT_ID" ]; then
                                    echo "Deleting snapshot: ${snapshotName} from resource group: ${params.SOURCE_RG}"
                                    az snapshot delete --name ${snapshotName} --resource-group ${params.SOURCE_RG} --yes
                                else
                                    echo "Snapshot ID not found for snapshot: ${snapshotName}. Please verify the name and source resource group."
                                fi
                                """
                            }
                        }
                    }
                }
            }
        }
    }
}
