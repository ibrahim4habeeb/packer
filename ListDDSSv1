if [ -f "${dd_name}" ]; then
    IFS=$'\n' read -d '' -r -a disks < "${dd_name}"
    for i in "${!disks[@]}"; do
        disks[i]="${disks[i]},ManagedDisk"
    done
else
    disks=()
fi

az disk list --query "[?timeCreated<'$(date -d '30 days ago' --utc +%Y-%m-%dT%H:%M:%SZ')'].{Name:name, Created:timeCreated}" --out table
az disk list --query "[?timeCreated<'$(date -d '30 days ago' --utc +%Y-%m-%dT%H:%M:%SZ')'].{Name:name, Created:timeCreated}" --out table

az disk list --query "[?timeCreated<'$(date -d '30 days ago' --utc +%Y-%m-%dT%H:%M:%SZ')'].{Name:name, Created:timeCreated}" --out table
az disk list --query "[?timeCreated<'$(date -u -d '30 days ago' +'%Y-%m-%dT%H:%M:%SZ')'].{Name:name, Created:timeCreated}" --out table

pipeline {
    agent any
    parameters {
        string(name: 'jenkinsRG', defaultValue: '', description: 'Resource Group Name')
        string(name: 'jenkinsType', defaultValue: '', description: 'Type of Jenkins Resource')
    }
    environment {
        ddname = "disk_list.txt"
        ssname = "snapshot_list.txt"
        ddssname = "resources.csv"
    }
    stages {
        stage('List Disks and Snapshots') {
            steps {
                script {
                    echo "Listing Managed Disks and Snapshots in Resource Group: ${params.jenkinsRG}"
                    sh """
                    az disk list -g ${params.jenkinsRG} --query "[].{Name:name,LastModified:timeCreated}" -o tsv > "${ddname}"
                    az snapshot list -g ${params.jenkinsRG} --query "[].{Name:name,LastModified:timeCreated}" -o tsv > "${ssname}"
                    """
                }
            }
        }
        stage('Create CSV File') {
            steps {
                script {
                    echo "Creating CSV file with resources and last modified date"
                    sh """
                    echo "JenkinsRG,ResourceType,ResourceName,LastModifiedDate" > ${ddssname}
                    awk -v rg=${params.jenkinsRG} '{print rg",ManagedDisk,"$1","$2}' ${ddname} >> ${ddssname}
                    awk -v rg=${params.jenkinsRG} '{print rg",snapshot,"$1","$2}' ${ssname} >> ${ddssname}
                    """
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution complete. Check the generated CSV: ${ddssname}"
            archiveArtifacts artifacts: "${ddssname}", allowEmptyArchive: true
        }
    }
}



pipeline {
    agent any
    parameters {
        string(name: 'jenkinsRG', defaultValue: '', description: 'Resource Group Name')
        string(name: 'jenkinsType', defaultValue: '', description: 'Type of Jenkins Resource')
    }
    environment {
        ddname = "disk_list.txt"
        ssname = "snapshot_list.txt"
        ddssname = "resources.csv"
    }
    stages {
        stage('List Disks and Snapshots') {
            steps {
                script {
                    echo "Listing Managed Disks and Snapshots in Resource Group: ${params.jenkinsRG}"
                    sh """
                    az disk list -g ${params.jenkinsRG} --query "[].{Name:name,LastModified:timeCreated}" -o tsv > "${ddname}"
                    az snapshot list -g ${params.jenkinsRG} --query "[].{Name:name,LastModified:timeCreated}" -o tsv > "${ssname}"
                    """
                    echo "Disk list saved to ${ddname}:"
                    sh "cat ${ddname}"
                    echo "Snapshot list saved to ${ssname}:"
                    sh "cat ${ssname}"
                }
            }
        }
        stage('Create CSV File') {
            steps {
                script {
                    echo "Creating CSV file with resources and last modified date"
                    sh """
                    echo "JenkinsRG,ResourceType,ResourceName,LastModifiedDate" > ${ddssname}

                    if [ -s ${ddname} ]; then
                        awk -v rg=${params.jenkinsRG} '{print rg",ManagedDisk,"$1","$2}' ${ddname} >> ${ddssname}
                    else
                        echo "No disk entries found."
                    fi

                    if [ -s ${ssname} ]; then
                        awk -v rg=${params.jenkinsRG} '{print rg",snapshot,"$1","$2}' ${ssname} >> ${ddssname}
                    else
                        echo "No snapshot entries found."
                    fi
                    """
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution complete. Check the generated CSV: ${ddssname}"
            sh "cat ${ddssname}"
            archiveArtifacts artifacts: "${ddssname}", allowEmptyArchive: true
        }
    }
}
============
pipeline {
    agent any
    parameters {
        string(name: 'jenkinsRG', defaultValue: '', description: 'Resource Group Name')
    }
    environment {
        ddname = "disk_list.txt"
        ssname = "snapshot_list.txt"
        ddssname = "resources.csv"
    }
    stages {
        stage('List Disks and Snapshots') {
            steps {
                script {
                    echo "Listing Managed Disks and Snapshots in Resource Group: ${params.jenkinsRG}"
                    sh """
                    az disk list -g ${params.jenkinsRG} --query "[].{Name:name,LastModified:timeCreated}" -o tsv > "${ddname}"
                    az snapshot list -g ${params.jenkinsRG} --query "[].{Name:name,LastModified:timeCreated}" -o tsv > "${ssname}"
                    """
                }
            }
        }
        stage('Create CSV File') {
            steps {
                script {
                    echo "Creating CSV file with resource details"
                    sh """
                    # Write header to the CSV file
                    echo "JenkinsRG,ResourceType,ResourceName,LastModifiedDate" > ${ddssname}

                    # Process disk list and add to CSV
                    if [ -s ${ddname} ]; then
                        while read -r line; do
                            name=\$(echo \$line | awk '{print \$1}')
                            lastModified=\$(echo \$line | awk '{print \$2}')
                            echo "${params.jenkinsRG},ManagedDisk,\$name,\$lastModified" >> ${ddssname}
                        done < ${ddname}
                    fi

                    # Process snapshot list and add to CSV
                    if [ -s ${ssname} ]; then
                        while read -r line; do
                            name=\$(echo \$line | awk '{print \$1}')
                            lastModified=\$(echo \$line | awk '{print \$2}')
                            echo "${params.jenkinsRG},snapshot,\$name,\$lastModified" >> ${ddssname}
                        done < ${ssname}
                    fi
                    """
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution complete. Generated CSV content:"
            sh "cat ${ddssname}"
            archiveArtifacts artifacts: "${ddssname}", allowEmptyArchive: true
        }
    }
}
