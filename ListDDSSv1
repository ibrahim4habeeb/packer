if [ -f "${dd_name}" ]; then
    IFS=$'\n' read -d '' -r -a disks < "${dd_name}"
    for i in "${!disks[@]}"; do
        disks[i]="${disks[i]},ManagedDisk"
    done
else
    disks=()
fi

az disk list --query "[?timeCreated<'$(date -d '30 days ago' --utc +%Y-%m-%dT%H:%M:%SZ')'].{Name:name, Created:timeCreated}" --out table
az disk list --query "[?timeCreated<'$(date -d '30 days ago' --utc +%Y-%m-%dT%H:%M:%SZ')'].{Name:name, Created:timeCreated}" --out table

az disk list --query "[?timeCreated<'$(date -d '30 days ago' --utc +%Y-%m-%dT%H:%M:%SZ')'].{Name:name, Created:timeCreated}" --out table
az disk list --query "[?timeCreated<'$(date -u -d '30 days ago' +'%Y-%m-%dT%H:%M:%SZ')'].{Name:name, Created:timeCreated}" --out table

pipeline {
    agent any
    parameters {
        string(name: 'jenkinsRG', defaultValue: '', description: 'Resource Group Name')
        string(name: 'jenkinsType', defaultValue: '', description: 'Type of Jenkins Resource')
    }
    environment {
        ddname = "disk_list.txt"
        ssname = "snapshot_list.txt"
        ddssname = "resources.csv"
    }
    stages {
        stage('List Disks and Snapshots') {
            steps {
                script {
                    echo "Listing Managed Disks and Snapshots in Resource Group: ${params.jenkinsRG}"
                    sh """
                    az disk list -g ${params.jenkinsRG} --query "[].{Name:name,LastModified:timeCreated}" -o tsv > "${ddname}"
                    az snapshot list -g ${params.jenkinsRG} --query "[].{Name:name,LastModified:timeCreated}" -o tsv > "${ssname}"
                    """
                }
            }
        }
        stage('Create CSV File') {
            steps {
                script {
                    echo "Creating CSV file with resources and last modified date"
                    sh """
                    echo "JenkinsRG,ResourceType,ResourceName,LastModifiedDate" > ${ddssname}
                    awk -v rg=${params.jenkinsRG} '{print rg",ManagedDisk,"$1","$2}' ${ddname} >> ${ddssname}
                    awk -v rg=${params.jenkinsRG} '{print rg",snapshot,"$1","$2}' ${ssname} >> ${ddssname}
                    """
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution complete. Check the generated CSV: ${ddssname}"
            archiveArtifacts artifacts: "${ddssname}", allowEmptyArchive: true
        }
    }
}



pipeline {
    agent any
    parameters {
        string(name: 'jenkinsRG', defaultValue: '', description: 'Resource Group Name')
        string(name: 'jenkinsType', defaultValue: '', description: 'Type of Jenkins Resource')
    }
    environment {
        ddname = "disk_list.txt"
        ssname = "snapshot_list.txt"
        ddssname = "resources.csv"
    }
    stages {
        stage('List Disks and Snapshots') {
            steps {
                script {
                    echo "Listing Managed Disks and Snapshots in Resource Group: ${params.jenkinsRG}"
                    sh """
                    az disk list -g ${params.jenkinsRG} --query "[].{Name:name,LastModified:timeCreated}" -o tsv > "${ddname}"
                    az snapshot list -g ${params.jenkinsRG} --query "[].{Name:name,LastModified:timeCreated}" -o tsv > "${ssname}"
                    """
                    echo "Disk list saved to ${ddname}:"
                    sh "cat ${ddname}"
                    echo "Snapshot list saved to ${ssname}:"
                    sh "cat ${ssname}"
                }
            }
        }
        stage('Create CSV File') {
            steps {
                script {
                    echo "Creating CSV file with resources and last modified date"
                    sh """
                    echo "JenkinsRG,ResourceType,ResourceName,LastModifiedDate" > ${ddssname}

                    if [ -s ${ddname} ]; then
                        awk -v rg=${params.jenkinsRG} '{print rg",ManagedDisk,"$1","$2}' ${ddname} >> ${ddssname}
                    else
                        echo "No disk entries found."
                    fi

                    if [ -s ${ssname} ]; then
                        awk -v rg=${params.jenkinsRG} '{print rg",snapshot,"$1","$2}' ${ssname} >> ${ddssname}
                    else
                        echo "No snapshot entries found."
                    fi
                    """
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution complete. Check the generated CSV: ${ddssname}"
            sh "cat ${ddssname}"
            archiveArtifacts artifacts: "${ddssname}", allowEmptyArchive: true
        }
    }
}
============
pipeline {
    agent any
    parameters {
        string(name: 'jenkinsRG', defaultValue: '', description: 'Resource Group Name')
    }
    environment {
        ddname = "disk_list.txt"
        ssname = "snapshot_list.txt"
        ddssname = "resources.csv"
    }
    stages {
        stage('List Disks and Snapshots') {
            steps {
                script {
                    echo "Listing Managed Disks and Snapshots in Resource Group: ${params.jenkinsRG}"
                    sh """
                    az disk list -g ${params.jenkinsRG} --query "[].{Name:name,LastModified:timeCreated}" -o tsv > "${ddname}"
                    az snapshot list -g ${params.jenkinsRG} --query "[].{Name:name,LastModified:timeCreated}" -o tsv > "${ssname}"
                    """
                }
            }
        }
        stage('Create CSV File') {
            steps {
                script {
                    echo "Creating CSV file with resource details"
                    sh """
                    # Write header to the CSV file
                    echo "JenkinsRG,ResourceType,ResourceName,LastModifiedDate" > ${ddssname}

                    # Process disk list and add to CSV
                    if [ -s ${ddname} ]; then
                        while read -r line; do
                            name=\$(echo \$line | awk '{print \$1}')
                            lastModified=\$(echo \$line | awk '{print \$2}')
                            echo "${params.jenkinsRG},ManagedDisk,\$name,\$lastModified" >> ${ddssname}
                        done < ${ddname}
                    fi

                    # Process snapshot list and add to CSV
                    if [ -s ${ssname} ]; then
                        while read -r line; do
                            name=\$(echo \$line | awk '{print \$1}')
                            lastModified=\$(echo \$line | awk '{print \$2}')
                            echo "${params.jenkinsRG},snapshot,\$name,\$lastModified" >> ${ddssname}
                        done < ${ssname}
                    fi
                    """
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution complete. Generated CSV content:"
            sh "cat ${ddssname}"
            archiveArtifacts artifacts: "${ddssname}", allowEmptyArchive: true
        }
    }
}
÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷##
pipeline {
    agent any
    parameters {
        string(name: 'jenkinsRG', defaultValue: '', description: 'Resource Group Name')
    }
    environment {
        ddname = "disk_list.txt"
        ssname = "snapshot_list.txt"
        ddssname = "resources.csv"
    }
    stages {
        stage('List Disks and Snapshots') {
            steps {
                script {
                    echo "Listing Managed Disks and Snapshots in Resource Group: ${params.jenkinsRG}"
                    sh """
                    #!/bin/bash
                    az disk list -g ${params.jenkinsRG} --query "[].{Name:name,LastModified:timeCreated}" -o tsv > "${ddname}"
                    az snapshot list -g ${params.jenkinsRG} --query "[].{Name:name,LastModified:timeCreated}" -o tsv > "${ssname}"
                    """
                }
            }
        }
        stage('Create CSV File') {
            steps {
                script {
                    echo "Creating CSV file with resource details"
                    sh """
                    #!/bin/bash
                    # Write header to the CSV file
                    echo "JenkinsRG,ResourceType,ResourceName,LastModifiedDate" > ${ddssname}

                    # Process disk list and add to CSV
                    if [ -s ${ddname} ]; then
                        while read -r line; do
                            name=$(echo $line | awk '{print $1}')
                            lastModified=$(echo $line | awk '{print $2}')
                            echo "${params.jenkinsRG},ManagedDisk,$name,$lastModified" >> ${ddssname}
                        done < ${ddname}
                    fi

                    # Process snapshot list and add to CSV
                    if [ -s ${ssname} ]; then
                        while read -r line; do
                            name=$(echo $line | awk '{print $1}')
                            lastModified=$(echo $line | awk '{print $2}')
                            echo "${params.jenkinsRG},snapshot,$name,$lastModified" >> ${ddssname}
                        done < ${ssname}
                    fi
                    """
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution complete. Generated CSV content:"
            sh "cat ${ddssname}"
            archiveArtifacts artifacts: "${ddssname}", allowEmptyArchive: true
        }
    }
}



az disk list -g rgname --query '[].{name:name, LastModified: (LastOwnershipUpdateTime != `null` && LastOwnershipUpdateTime != ``) ? LastOwnershipUpdateTime : timeCreated}' -o tsv


az disk list -g rgname --query '[].{name:name, LastModified: `if`(LastOwnershipUpdateTime, LastOwnershipUpdateTime, timeCreated)}' -o tsv




az disk list -g rgname --query '[].{name:name, LastOwnershipUpdateTime:LastOwnershipUpdateTime, timeCreated:timeCreated}' -o json | \
jq -r '.[] | {name: .name, LastModified: (.LastOwnershipUpdateTime // .timeCreated)}'





pipeline {
    agent any
    stages {
        stage('Disk List') {
            steps {
                script {
                    // Use a Groovy string and escape backslashes properly for Groovy
                    sh '''#!/bin/bash
                        az disk list -g rgname --query '[].{name:name, LastOwnershipUpdateTime:LastOwnershipUpdateTime, timeCreated:timeCreated}' -o json | \\
                        jq -r '.[] | {name: .name, LastModified: (.LastOwnershipUpdateTime // .timeCreated)}' > ddnames.txt
                    '''
                }
            }
        }
    }
}






az disk list -g rgname --query '[].{name:name, LastOwnershipUpdateTime:LastOwnershipUpdateTime, timeCreated:timeCreated}' -o json


az disk list -g rgname --query '[].{name:name, LastOwnershipUpdateTime:LastOwnershipUpdateTime, timeCreated:timeCreated}' -o json | \
jq -r '.[] | {name: .name, LastModified: (.LastOwnershipUpdateTime // .timeCreated)}' > ddnames.txt


pipeline {
    agent any
    stages {
        stage('Disk List') {
            steps {
                script {
                    sh '''#!/bin/bash
                        az disk list -g rgname --query '[].{name:name, LastOwnershipUpdateTime:LastOwnershipUpdateTime, timeCreated:timeCreated}' -o json | \
                        jq -r '.[] | {name: .name, LastModified: (.LastOwnershipUpdateTime // .timeCreated)}' > ddnames.txt
                    '''
                }
            }
        }
    }
}



az disk list -g rgname --query '[].{name:name, LastOwnershipUpdateTime:LastOwnershipUpdateTime, timeCreated:timeCreated}' -o json | jq -r '.[] | "\(.name) \((.LastOwnershipUpdateTime // .timeCreated) | strftime("%d-%m-%Y"))"' > ddnames.txt





az disk list -g rgname --query '[].{name:name, LastOwnershipUpdateTime:LastOwnershipUpdateTime, timeCreated:timeCreated}' -o json | jq -r '.[] | "\(.name) \((.LastOwnershipUpdateTime // .timeCreated) | strftime(\"%d-%m-%Y\"))"' > ddnames.txt


alternate fix


sh '''#!/bin/bash
az disk list -g rgname --query '[].{name:name, LastOwnershipUpdateTime:LastOwnershipUpdateTime, timeCreated:timeCreated}' -o json | jq -r '.[] | "\(.name) \((.LastOwnershipUpdateTime // .timeCreated | strftime("%d-%m-%Y")))"' > ddnames.txt
'''

sh '''#!/bin/bash
az disk list -g rgname --query '[].{name:name, LastOwnershipUpdateTime:LastOwnershipUpdateTime, timeCreated:timeCreated}' -o json | jq -r '.[] | .name + " " + ((.LastOwnershipUpdateTime // .timeCreated | strftime("%d-%m-%Y")))' > ddnames.txt
'''

sh '''#!/bin/bash
az disk list -g rgname --query '[].{name:name, LastOwnershipUpdateTime:LastOwnershipUpdateTime, timeCreated:timeCreated}' -o json | jq -r '.[] | "\(.name) \((.LastOwnershipUpdateTime // .timeCreated | strftime(\\"%d-%m-%Y\\")))"' > ddnames.txt
'''
az disk list -g rgname --query '[].{name:name, LastOwnershipUpdateTime:LastOwnershipUpdateTime, timeCreated:timeCreated}' -o json | jq -r '.[] | "\(.name) \((.LastOwnershipUpdateTime // .timeCreated | strftime("%d-%m-%Y")))"'




pipeline {
    agent any
    stages {
        stage('Generate Disk and Snapshot Info') {
            steps {
                script {
                    sh '''#!/bin/bash
# Function to convert ISO 8601 date to DD-MM-YYYY format
convert_date() {
    date -d "$1" '+%d-%m-%Y'
}

# Fetch disk information and format dates
az disk list -g rgname \
    --query '[].{name:name, LastModified: (LastOwnershipUpdateTime // timeCreated)}' -o tsv \
    | while IFS=$'\t' read -r name date; do
        formatted_date=$(convert_date "$date")
        echo "$name $formatted_date" >> ddnames.txt
    done

# Fetch snapshot information and format dates
az snapshot list -g rgname \
    --query '[].{name:name, LastModified: (LastOwnershipUpdateTime // timeCreated)}' -o tsv \
    | while IFS=$'\t' read -r name date; do
        formatted_date=$(convert_date "$date")
        echo "$name $formatted_date" >> ssnames.txt
    done
                    '''
                }
            }
        }
    }
}





using json and jq

pipeline {
    agent any
    stages {
        stage('Generate Disk and Snapshot Info') {
            steps {
                script {
                    sh '''#!/bin/bash
# Function to format date to DD-MM-YYYY
format_date() {
    jq -r '. | .name + " " + (.LastModified | sub("T.*$"; "") | split("-") | .[2] + "-" + .[1] + "-" + .[0])'
}

# Fetch and process disk information
az disk list -g rgname \
    --query '[].{name:name, LastModified: (LastOwnershipUpdateTime // timeCreated)}' -o json \
    | jq -c '.[]' \
    | while read -r entry; do
        echo "$entry" | format_date >> ddnames.txt
    done

# Fetch and process snapshot information
az snapshot list -g rgname \
    --query '[].{name:name, LastModified: (LastOwnershipUpdateTime // timeCreated)}' -o json \
    | jq -c '.[]' \
    | while read -r entry; do
        echo "$entry" | format_date >> ssnames.txt
    done
                    '''
                }
            }
        }
    }
}
above pipeline explanation

ChatGPT

You said:
I am using below command




pipeline {
    agent any
    stages {
        stage('Disk List') {
            steps {
                script {
                    
                }sh '''#!/bin/bash
az disk list -g rgname --query '[].{name:name, LastOwnershipUpdateTime:LastOwnershipUpdateTime, timeCreated:timeCreated}' -o json | jq -r '.[] | {name: .name, LastModified: (.LastOwnershipUpdateTime // .timeCreated)}'
az snapshot list -g rgname --query '[].{name:name, LastOwnershipUpdateTime:LastOwnershipUpdateTime, timeCreated:timeCreated}' -o json | jq -r '.[] | {name: .name, LastModified: (.LastOwnershipUpdateTime // .timeCreated)}'
'''        
    }
        }
    }
}

How to only datadisk and snapshot name and there corresponding date into a file as named ddnames.txt and ssnames.txt
Example
disk1 24-12-2024 

?
ChatGPT said:
ChatGPT
To achieve your requirement of filtering the output and saving disk and snapshot names with corresponding dates into separate files (ddnames.txt for data disks and ssnames.txt for snapshots), you can modify your Jenkins Pipeline as follows:

Updated Jenkins Pipeline Code
pipeline {
    agent any
    stages {
        stage('Disk and Snapshot Info') {
            steps {
                script {
                    sh '''#!/bin/bash
# Get disk names and dates, save to ddnames.txt
az disk list -g rgname \
    --query '[].{name:name, LastModified: (LastOwnershipUpdateTime // timeCreated)}' -o tsv \
    | awk '{print $1, $2}' > ddnames.txt

# Get snapshot names and dates, save to ssnames.txt
az snapshot list -g rgname \
    --query '[].{name:name, LastModified: (LastOwnershipUpdateTime // timeCreated)}' -o tsv \
    | awk '{print $1, $2}' > ssnames.txt
                    '''
                }
            }
        }
    }
}
Explanation:
Command for Disks:

az disk list -g rgname: Lists disks in the specified resource group.
--query '[].{name:name, LastModified: (LastOwnershipUpdateTime // timeCreated)}': Extracts the name and either LastOwnershipUpdateTime or timeCreated.
-o tsv: Formats output as tab-separated values.
awk '{print $1, $2}': Outputs the first two columns (name and date).
Command for Snapshots:

Similar to disks but uses az snapshot list to fetch snapshots.
Output to Files:

Disk details are saved in ddnames.txt.
Snapshot details are saved in ssnames.txt.
Sample Output in Files
ddnames.txt:

disk1 2024-12-24T10:00:00Z
disk2 2025-01-10T15:30:00Z
ssnames.txt:

snapshot1 2024-12-23T18:00:00Z
snapshot2 2025-01-09T20:45:00Z
Optional: Date Formatting
If you want the date in a different format (e.g., DD-MM-YYYY), use date in the pipeline:

... | awk '{print $1, strftime("%d-%m-%Y", strtotime($2))}' > ddnames.txt





You said:
Give full pipeline script With date formationg ?
ChatGPT said:
ChatGPT
Here’s the full Jenkins pipeline script with the required date formatting (DD-MM-YYYY) for both disks and snapshots:

Full Pipeline Script
pipeline {
    agent any
    stages {
        stage('Generate Disk and Snapshot Info') {
            steps {
                script {
                    sh '''#!/bin/bash
# Function to convert ISO 8601 date to DD-MM-YYYY format
convert_date() {
    date -d "$1" '+%d-%m-%Y'
}

# Fetch disk information and format dates
az disk list -g rgname \
    --query '[].{name:name, LastModified: (LastOwnershipUpdateTime // timeCreated)}' -o tsv \
    | while IFS=$'\t' read -r name date; do
        formatted_date=$(convert_date "$date")
        echo "$name $formatted_date" >> ddnames.txt
    done

# Fetch snapshot information and format dates
az snapshot list -g rgname \
    --query '[].{name:name, LastModified: (LastOwnershipUpdateTime // timeCreated)}' -o tsv \
    | while IFS=$'\t' read -r name date; do
        formatted_date=$(convert_date "$date")
        echo "$name $formatted_date" >> ssnames.txt
    done
                    '''
                }
            }
        }
    }
}
Key Details:
convert_date Function:

Uses the date command to reformat ISO 8601 timestamps (e.g., 2024-12-24T10:00:00Z) to the DD-MM-YYYY format.
Disk Information:

Fetches disk names and dates using az disk list.
Uses a while loop to process each disk entry, reformat the date, and append it to ddnames.txt.
Snapshot Information:

Similar to disks but fetches snapshots using az snapshot list.
Appends the formatted output to ssnames.txt.
Sample Output Files:
ddnames.txt:

disk1 24-12-2024
disk2 10-01-2025
ssnames.txt:

snapshot1 23-12-2024
snapshot2 09-01-2025
Notes:
Replace rgname with the actual name of your resource group.
Ensure the date command supports the -d option (most Linux environments do).
If you’re running this in an environment where date doesn’t support -d (e.g., macOS), replace date -d with gdate -d (requires coreutils package).





You said:


You said:
I am using below command




pipeline {
    agent any
    stages {
        stage('Disk List') {
            steps {
                script {
                    
                }sh '''#!/bin/bash
az disk list -g rgname --query '[].{name:name, LastOwnershipUpdateTime:LastOwnershipUpdateTime, timeCreated:timeCreated}' -o json | jq -r '.[] | {name: .name, LastModified: (.LastOwnershipUpdateTime // .timeCreated)}'
az snapshot list -g rgname --query '[].{name:name, LastOwnershipUpdateTime:LastOwnershipUpdateTime, timeCreated:timeCreated}' -o json | jq -r '.[] | {name: .name, LastModified: (.LastOwnershipUpdateTime // .timeCreated)}'
'''        


How about using -o json to do this ?
ChatGPT said:
ChatGPT
If you'd like to achieve the same goal using -o json and process the data using jq to output formatted dates, here's the updated pipeline script.

Full Pipeline Script (Using JSON and jq)
pipeline {
    agent any
    stages {
        stage('Generate Disk and Snapshot Info') {
            steps {
                script {
                    sh '''#!/bin/bash
# Convert ISO 8601 date to DD-MM-YYYY format using jq
format_date() {
    jq -r '. | .name + " " + (.LastModified | sub("T.*$"; "") | sub("-"; "/") | sub("-"; "/"))'
}

# Fetch and process disk information
az disk list -g rgname \
    --query '[].{name:name, LastModified: (LastOwnershipUpdateTime // timeCreated)}' -o json \
    | jq -c '.[]' \
    | while read -r entry; do
        echo "$entry" | format_date >> ddnames.txt
    done

# Fetch and process snapshot information
az snapshot list -g rgname \
    --query '[].{name:name, LastModified: (LastOwnershipUpdateTime // timeCreated)}' -o json \
    | jq -c '.[]' \
    | while read -r entry; do
        echo "$entry" | format_date >> ssnames.txt
    done
                    '''
                }
            }
        }
    }
}
Explanation:
Data Fetching:

Uses az disk list and az snapshot list to fetch data in JSON format.
The query ensures we retrieve the name and a computed LastModified field using LastOwnershipUpdateTime or timeCreated.
Date Formatting with jq:

The format_date function uses jq to:
Extract the LastModified field.
Remove the time component (T...) using sub("T.*$"; "").
Replace - with / to achieve the DD/MM/YYYY format.
Looping and Writing to Files:

Each JSON object is processed through jq to extract and format the required fields.
Appends the formatted output to ddnames.txt (for disks) or ssnames.txt (for snapshots).
